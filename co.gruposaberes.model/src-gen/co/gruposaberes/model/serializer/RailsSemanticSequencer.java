/*
 * generated by Xtext
 */
package co.gruposaberes.model.serializer;

import co.gruposaberes.model.rails.HashKeyValue;
import co.gruposaberes.model.rails.RailsPackage;
import co.gruposaberes.model.rails.Relationship;
import co.gruposaberes.model.rails.RubyClass;
import co.gruposaberes.model.rails.RubyMethod;
import co.gruposaberes.model.rails.TableName;
import co.gruposaberes.model.services.RailsGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RailsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RailsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RailsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RailsPackage.HASH_KEY_VALUE:
				sequence_HashKeyValue(context, (HashKeyValue) semanticObject); 
				return; 
			case RailsPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case RailsPackage.RUBY_CLASS:
				sequence_Class(context, (RubyClass) semanticObject); 
				return; 
			case RailsPackage.RUBY_METHOD:
				sequence_Method(context, (RubyMethod) semanticObject); 
				return; 
			case RailsPackage.TABLE_NAME:
				sequence_TableName(context, (TableName) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Class returns RubyClass
	 *
	 * Constraint:
	 *     (name=NamespacedModuleName superType=NamespacedModuleName? classElements+=ClassElement*)
	 */
	protected void sequence_Class(ISerializationContext context, RubyClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HashKeyValue returns HashKeyValue
	 *
	 * Constraint:
	 *     (
	 *         (key=ID | key=SYMBOL | key=STRING) 
	 *         (
	 *             value=SYMBOL | 
	 *             value=STRING | 
	 *             value=BRACKET_BLOCK | 
	 *             value=ARRAY_BLOCK | 
	 *             value=DECIMAL | 
	 *             value=INT | 
	 *             value=INT_METHOD | 
	 *             value=MethodChainCall
	 *         )
	 *     )
	 */
	protected void sequence_HashKeyValue(ISerializationContext context, HashKeyValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassElement returns RubyMethod
	 *     Method returns RubyMethod
	 *
	 * Constraint:
	 *     name=MethodName
	 */
	protected void sequence_Method(ISerializationContext context, RubyMethod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RailsPackage.Literals.CLASS_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RailsPackage.Literals.CLASS_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMethodAccess().getNameMethodNameParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClassElement returns Relationship
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         (relationType=HAS_MANY_WORD | relationType=HAS_ONE_WORD | relationType=HAS_AND_BELONGS_TO_MANY_WORD | relationType=BELONGS_TO_WORD) 
	 *         (name=SYMBOL | name=STRING) 
	 *         options+=HashKeyValue*
	 *     )
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassElement returns TableName
	 *     TableName returns TableName
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_TableName(ISerializationContext context, TableName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RailsPackage.Literals.CLASS_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RailsPackage.Literals.CLASS_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableNameAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
