grammar co.gruposaberes.model.Rails hidden(LF,CR,SPACE,SL_COMMENT,ML_COMMENT,REQUIRE)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate rails "http://www.gruposaberes.co/model/Rails"

Class returns RubyClass:
  CLASS_WORD SPACE* name=NamespacedModuleName (SPACE* '<' SPACE* superType=NamespacedModuleName)? SPACE*
    classElements+=ClassElement*
;

ClassElement returns ClassElement:
  ->(Method| -> Relationship|TableName)|(OperationsChain)
;

TableName:
	SET_TABLE_NAME name=STRING
;

Assignment:
	ID '=' (SYMBOL|STRING|ARRAY_BLOCK|PARENTHESIS_BLOCK|BRACKET_BLOCK|DECIMAL|INT|REGEXP|MethodChainCall)
;

//Require:
//  REQUIRE_WORD SPACE* STRING SPACE*
//;

NamespacedModuleName :
(ID'::')*ID
;

MethodChainCall:
	//SPACE* Causes alternatives warning 
	(SYMBOL|STRING|INT|INT_METHOD|PARENTHESIS_BLOCK|ARRAY_BLOCK|NamespacedModuleName)
		('.'ID PARENTHESIS_BLOCK?)* SPACE* MethodCallParameters?  => SPACE* 
		BRACKET_BLOCK? => SPACE* DO_BLOCK_PARAMETERS? => SPACE* => LF?
;

MethodCallParameters:
	(PARENTHESIS_BLOCK|ExpressionsSeparatedByCommas)
;

ExpressionsSeparatedByCommas:
	ExpressionWithOutBracket ( SPACE* COMMA (SPACE* LF)? SPACE* Expression)*
	// => SPACE* BS
;

ExpressionWithOutBracket:
	(SYMBOL|STRING|ARRAY_BLOCK|PARENTHESIS_BLOCK|DECIMAL|INT|REGEXP|MethodChainCall|IgnoredHashKeyValue)
;

Expression:
	ExpressionWithOutBracket|BRACKET_BLOCK
;

Relationship :
  relationType=(HAS_MANY_WORD|HAS_ONE_WORD|HAS_AND_BELONGS_TO_MANY_WORD|BELONGS_TO_WORD)
  SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue*
;

HashKeyValue:
  COMMA SPACE* (LF SPACE*)? (key=ID':'|key=(SYMBOL|STRING) SPACE*'=>') SPACE* value=(SYMBOL|STRING|BRACKET_BLOCK|ARRAY_BLOCK|DECIMAL|INT|INT_METHOD|MethodChainCall) SPACE*
;

IgnoredHashKeyValue:
	SPACE* (ID':'|(SYMBOL|STRING) SPACE*'=>') SPACE* (SYMBOL|STRING|BRACKET_BLOCK|ARRAY_BLOCK|DECIMAL|INT|INT_METHOD|MethodChainCall|REGEXP) SPACE*
;

Method returns RubyMethod:
  DEF_WORD SPACE* name=MethodName SPACE* PARENTHESIS_BLOCK? SPACE* LF?
;

MethodName:
(NamespacedModuleName'.')? ID('?'|'=')?
;

OperationsChain:
	MethodChainCall (OperatorRule (BRACKET_BLOCK|DECIMAL|MethodChainCall|REGEXP))*
;
OperatorRule:
//	operator_string=OPERATOR_STRING '='?
 (': '|'?'|'<='|'<'|'+'|'-'|'*'|'/'|'%'|'**'|'='|'~'|'|'|'||'|'&'|'&&'|'=='|'!'|'<<'|'<=>'|'>'|'..'|'...')'='?
;


terminal COMMA: ',';

terminal SPACE: ' '|'\t';
//4 nested levels, looking for a better strategy
terminal fragment NOT_BRACKET_SEQ:
  !('{'|'}')*
;
terminal fragment FIRST_LEVEL_BRACKET_BLOCK:
  '{'
      NOT_BRACKET_SEQ
    '}'
    NOT_BRACKET_SEQ
;

terminal fragment SECOND_LEVEL_BRACKET_BLOCK:
  '{' NOT_BRACKET_SEQ 
        FIRST_LEVEL_BRACKET_BLOCK*  
     '}'NOT_BRACKET_SEQ
;
terminal fragment THIRD_LEVEL_BRACKET_BLOCK:
  '{' NOT_BRACKET_SEQ 
        SECOND_LEVEL_BRACKET_BLOCK*  
     '}'NOT_BRACKET_SEQ
;

//4 nested levels, looking for a better strategy
terminal BRACKET_BLOCK: 
  '{' 
    NOT_BRACKET_SEQ 
    THIRD_LEVEL_BRACKET_BLOCK*  
  '}'
;
terminal fragment NOT_ARRAY_SEQ:
  !('['|']')*
;
terminal fragment FIRST_LEVEL_ARRAY_BLOCK:
  '['
      NOT_ARRAY_SEQ
    ']'
    NOT_ARRAY_SEQ
;

terminal fragment SECOND_LEVEL_ARRAY_BLOCK:
  '[' NOT_ARRAY_SEQ 
        FIRST_LEVEL_ARRAY_BLOCK*  
     ']'NOT_ARRAY_SEQ
;
terminal fragment THIRD_LEVEL_ARRAY_BLOCK:
  '[' NOT_ARRAY_SEQ 
        SECOND_LEVEL_ARRAY_BLOCK*  
     ']'NOT_ARRAY_SEQ
;

//4 nested levels, looking for a better strategy
terminal ARRAY_BLOCK: 
  '[' 
    NOT_ARRAY_SEQ 
    THIRD_LEVEL_ARRAY_BLOCK*  
  ']'
;

terminal fragment NOT_PARENTHESIS_SEQ:
	!('('|')')*
;
terminal fragment FIRST_LEVEL_PARENTHESIS_BLOCK:
	'('
      NOT_PARENTHESIS_SEQ
    ')'
    NOT_PARENTHESIS_SEQ
;

terminal fragment SECOND_LEVEL_PARENTHESIS_BLOCK:
	'(' NOT_PARENTHESIS_SEQ 
      	FIRST_LEVEL_PARENTHESIS_BLOCK*  
     ')'NOT_PARENTHESIS_SEQ
;
terminal fragment THIRD_LEVEL_PARENTHESIS_BLOCK:
	'(' NOT_PARENTHESIS_SEQ 
      	SECOND_LEVEL_PARENTHESIS_BLOCK*  
     ')'NOT_PARENTHESIS_SEQ
;

//4 nested levels, looking for a better strategy
terminal PARENTHESIS_BLOCK: 
  '(' 
  	NOT_PARENTHESIS_SEQ 
    THIRD_LEVEL_PARENTHESIS_BLOCK*  
  ')'
;

terminal DO_BLOCK_PARAMETERS: 'do' SPACE* '|'ID SPACE* (COMMA SPACE* ID)*'|';

terminal BELONGS_TO_WORD: 'belongs_to';

terminal HAS_MANY_WORD: 'has_many';

terminal HAS_ONE_WORD: 'has_one';

terminal HAS_AND_BELONGS_TO_MANY_WORD: 'has_and_belongs_to_many';

terminal SET_TABLE_NAME: 'set_table_name';

terminal MODULE_WORD: 'module';

terminal CLASS_WORD: 'class ';

terminal DEF_WORD: 'def';

terminal SYMBOL:':'ID;

terminal ID: (CLASS_WORD|('a'..'z'|'A'..'Z'|'_'|'$'|'@')('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'!'|'@'|'?')*);

terminal STRING: 
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | ('#'BRACKET_BLOCK) | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";

terminal ML_COMMENT	: '=begin' -> '=end';

terminal SL_COMMENT : '#'->'\n';

terminal INT: ('0'..'9')+;

terminal INT_METHOD: ('0'..'9')+'.'ID;

terminal DECIMAL: ('0'..'9')+'.'('0'..'9')+;

terminal REGEXP: '/' ('\\/' | !('\\/'|LF) )* '/'('i'|'o'|'p')?;

terminal LF	: '\n';

terminal CR: '\r';


terminal REQUIRE: 'require' SPACE* STRING;

terminal ANY_OTHER: .;

//terminal OPERATOR_STRING: (':'|'?'|'<='|'<'|'+'|'-'|'*'|'/'|'%'|'**'|'='|'~'|'|'|'||'|'&'|'&&'|'=='|'!'|'<<'|'<=>'|'>'|'..'|'...');
