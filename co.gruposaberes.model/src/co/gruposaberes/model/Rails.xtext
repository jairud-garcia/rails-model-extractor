grammar co.gruposaberes.model.Rails hidden(BS,SPACE, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate rails "http://www.gruposaberes.co/model/Rails"

Class returns RubyClass:
  CLASS_WORD SPACE* name=NamespacedModuleName (SPACE* '<' SPACE* superType=NamespacedModuleName)? SPACE*
    classElements+=ClassElement*
;

ClassElement returns ClassElement:
  Method|Relationship|OperationsChain
;

NamespacedModuleName :
(ID'::')*ID
;

MethodChainCall:
	//SPACE* Causes alternatives warning 
	(SYMBOL|STRING|INT|INT_METHOD|PARENTHESIS_BLOCK|ARRAY_BLOCK|NamespacedModuleName)
		('.'ID PARENTHESIS_BLOCK?)* SPACE* MethodCallParameters?  => SPACE* 
		BRACKET_BLOCK? => SPACE* DO_BLOCK_PARAMETERS? => SPACE*
;

MethodCallParameters:
	(PARENTHESIS_BLOCK|ExpressionsSeparatedByCommas)
;

ExpressionsSeparatedByCommas:
	ExpressionWithOutBracket ( SPACE* COMMA SPACE* Expression)*
	// => SPACE* BS
;

ExpressionWithOutBracket:
	(SYMBOL|STRING|ARRAY_BLOCK|PARENTHESIS_BLOCK|DECIMAL|INT|REGEXP|MethodChainCall|IgnoredHashKeyValue)
;

Expression:
	ExpressionWithOutBracket|BRACKET_BLOCK
;

OperationsChain:
	MethodChainCall (OperatorRule (BRACKET_BLOCK|DECIMAL|MethodChainCall|REGEXP))*
;
OperatorRule:
	(': '|'?'|'<'|'+'|'-'|'*'|'/'|'%'|'**'|'='|'~'|'|'|'||'|'&'|'&&'|'=='|'!'|'<<'|'<=>'|'>'|'..'|'...')'='?
;

Relationship :
  HasMany | HasOne| HasAndBelongsToMany | BelongsTo 
;

HasMany returns HasMany:
  HAS_MANY_WORD SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue* SL_COMMENT?
;

HasOne returns HasOne:
  HAS_ONE_WORD SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue* SL_COMMENT?
;

HasAndBelongsToMany returns HasAndBelongsToMany:
  HAS_AND_BELONGS_TO_MANY_WORD SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue*
;

BelongsTo returns BelongsTo:
  BELONGS_TO_WORD SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue*
;

HashKeyValue:
  COMMA SPACE* (key=ID':'|key=(SYMBOL|STRING) SPACE*'=>') SPACE* value=(SYMBOL|STRING|BRACKET_BLOCK|ARRAY_BLOCK|DECIMAL|INT|INT_METHOD|MethodChainCall) SPACE*
;

IgnoredHashKeyValue:
	SPACE* (ID':'|(SYMBOL|STRING) SPACE*'=>') SPACE* (SYMBOL|STRING|BRACKET_BLOCK|ARRAY_BLOCK|DECIMAL|INT|INT_METHOD|MethodChainCall|REGEXP) SPACE*
;

Method returns RubyMethod:
  DEF_WORD SPACE* name=MethodName SPACE* PARENTHESIS_BLOCK? 
;

MethodName:
(NamespacedModuleName'.')? ID('?'|'=')?
;

terminal COMMA: ',';

terminal SPACE: ' '|'\f';
//3 nested levels, looking for a better strategy
terminal BRACKET_BLOCK: 
	'{' !('{'|'}')*
		('{' !('{'|'}')* 
			('{'
			 		!('{'|'}')*
			 '}'!('{'|'}')*				
			)*	
		 '}'!('{'|'}')*
		)*  
	'}'
;

terminal ARRAY_BLOCK: 
  '[' !('['|']')*
    ('[' !('['|']')* 
      ('['
          !('['|']')*
       ']'!('['|']')*       
      )*  
     ']'!('['|']')*
    )*  
  ']'
;



terminal PARENTHESIS_BLOCK: 
  '(' !('('|')')*
    ('(' !('('|')')* 
      ('('
          !('('|')')*
       ')'!('('|')')*       
      )*  
     ')'!('('|')')*
    )*  
  ')'
;

terminal DO_BLOCK_PARAMETERS: 'do' SPACE* '|'ID SPACE* (COMMA SPACE* ID)*'|';

terminal BELONGS_TO_WORD: 'belongs_to';

terminal HAS_MANY_WORD: 'has_many';

terminal HAS_ONE_WORD: 'has_one';

terminal HAS_AND_BELONGS_TO_MANY_WORD: 'has_and_belongs_to_many';

terminal MODULE_WORD: 'module';

terminal CLASS_WORD: 'class ';

terminal DEF_WORD: 'def';

terminal SYMBOL:':'ID;

terminal ID: (CLASS_WORD|('a'..'z'|'A'..'Z'|'_'|'$'|'@')('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'!'|'@'|'?')*);

terminal STRING: 
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | ('#'BRACKET_BLOCK) | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";

terminal ML_COMMENT	: '=begin' -> '=end';

terminal SL_COMMENT : '#'->'\n';

//terminal WS	: (BS|SPACE)+;

terminal INT: ('0'..'9')+;

terminal INT_METHOD: ('0'..'9')+'.'ID;

terminal DECIMAL: ('0'..'9')+'.'('0'..'9')+;

terminal REGEXP: '/' ('\\/' | !('\\/'|BS) )* '/'('i'|'o'|'p')?;

terminal BS	: ('\t'|'\n');


terminal ANY_OTHER: .;
