grammar co.gruposaberes.model.Rails hidden(BS,SPACE, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate rails "http://www.gruposaberes.co/model/Rails"

Class returns RubyClass:
  CLASS_WORD SPACE* name=NamespacedModuleName (SPACE* '<' SPACE* superType=NamespacedModuleName)? SPACE*
    classElements+=ClassElement*
;

ClassElement returns ClassElement:
  Method|Relationship|OtherLOC
;


NamespacedModuleName :
(ID'::')*ID
;

MethodChainCall:
	//SPACE* Causes alternatives warning 
	NamespacedModuleName('.'ID)* SPACE* MethodCallParameters?  => SPACE* BRACKET_BLOCK?
;

MethodCallParameters:
	(PARENTHESIS_BLOCK|MethodParamsWithoutParenthesis)
;

MethodParamsWithoutParenthesis:
	ExpressionsSeparatedByCommas
;

ExpressionsSeparatedByCommas:
	ExpressionWithOutBracket ( SPACE* COMMA SPACE* Expression)*
	// => SPACE* BS
;

ExpressionWithOutBracket:
	(SYMBOL|STRING|ARRAY_BLOCK|PARENTHESIS_BLOCK|DECIMAL|INT|REGEXP|MethodChainCall|IgnoredHashKeyValue)
;


Expression:
	ExpressionWithOutBracket|BRACKET_BLOCK
;


OtherLOC returns OtherLOC:
	{OtherLOC} MethodChainCall
;


Relationship :
  HasMany | HasAndBelongsToMany | BelongsTo 
;

HasMany returns HasMany:
  HAS_MANY_WORD SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue* SL_COMMENT?
;

HasAndBelongsToMany returns HasAndBelongsToMany:
  HAS_AND_BELONGS_TO_MANY_WORD SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue*
;

BelongsTo returns BelongsTo:
  BELONGS_TO_WORD SPACE* name=(SYMBOL|STRING) SPACE* options+=HashKeyValue*
;

HashKeyValue:
  COMMA SPACE* (key=ID':'|key=(SYMBOL|STRING) SPACE*'=>') SPACE* value=(SYMBOL|STRING|BRACKET_BLOCK|ARRAY_BLOCK|DECIMAL|INT|INT_METHOD|MethodChainCall) SPACE*
;

IgnoredHashKeyValue:
	SPACE* (ID':'|(SYMBOL|STRING) SPACE*'=>') SPACE* (SYMBOL|STRING|BRACKET_BLOCK|ARRAY_BLOCK|DECIMAL|INT|INT_METHOD|MethodChainCall|REGEXP) SPACE*
;

Method returns RubyMethod:
  DEF_WORD SPACE* name=MethodName SPACE* PARENTHESIS_BLOCK? 
;

MethodName:
ID('?'|'=')?
;

terminal COMMA: ',';

terminal SPACE: ' '|'\f';

terminal BRACKET_BLOCK: '{'->'}';

terminal ARRAY_BLOCK: '['->']';

terminal PARENTHESIS_BLOCK: '('->')';

terminal BELONGS_TO_WORD: 'belongs_to';

terminal HAS_MANY_WORD: 'has_many';

terminal HAS_AND_BELONGS_TO_MANY_WORD: 'has_and_belongs_to_many';

terminal CLASS_WORD: 'class';

terminal MODULE_WORD: 'module';

terminal DEF_WORD: 'def';

//terminal END_WORD: 'end';

//terminal OTHER_LOC: SPACE* !(BELONGS_TO_WORD | HAS_MANY_WORD | HAS_AND_BELONGS_TO_MANY_WORD | CLASS_WORD | MODULE_WORD | DEF_WORD|BS|SPACE)->BS;

terminal SYMBOL:':'ID;

terminal ID: ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal STRING: '"'->'"' | "'"->"'";

terminal ML_COMMENT	: '=begin' -> '=end';

terminal SL_COMMENT : '#'->'\n';

//terminal WS	: (BS|SPACE)+;

terminal INT: ('0'..'9')+;

terminal INT_METHOD: ('0'..'9')+'.'ID;

terminal DECIMAL: ('0'..'9')+'.'('0'..'9')+;

terminal REGEXP: '/' ('\\/' | !('\\/'|BS) )* '/'('i'|'o'|'p')?;

terminal BS	: ('\r'|'\n');

//terminal ANY_OTHER: .;
