/**
 */
package universal.oracleforms.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import universal.oracleforms.util.OracleformsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OracleformsItemProviderAdapterFactory extends OracleformsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OracleformsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.OracleFormsApp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OracleFormsAppItemProvider oracleFormsAppItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.OracleFormsApp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOracleFormsAppAdapter() {
		if (oracleFormsAppItemProvider == null) {
			oracleFormsAppItemProvider = new OracleFormsAppItemProvider(this);
		}

		return oracleFormsAppItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.ModuleRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleRelationshipItemProvider moduleRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.ModuleRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleRelationshipAdapter() {
		if (moduleRelationshipItemProvider == null) {
			moduleRelationshipItemProvider = new ModuleRelationshipItemProvider(this);
		}

		return moduleRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.FormCallRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormCallRelationshipItemProvider formCallRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.FormCallRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormCallRelationshipAdapter() {
		if (formCallRelationshipItemProvider == null) {
			formCallRelationshipItemProvider = new FormCallRelationshipItemProvider(this);
		}

		return formCallRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.MasterDetailRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MasterDetailRelationshipItemProvider masterDetailRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.MasterDetailRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMasterDetailRelationshipAdapter() {
		if (masterDetailRelationshipItemProvider == null) {
			masterDetailRelationshipItemProvider = new MasterDetailRelationshipItemProvider(this);
		}

		return masterDetailRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.DetailTableRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetailTableRelationshipItemProvider detailTableRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.DetailTableRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetailTableRelationshipAdapter() {
		if (detailTableRelationshipItemProvider == null) {
			detailTableRelationshipItemProvider = new DetailTableRelationshipItemProvider(this);
		}

		return detailTableRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.SingleTableRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleTableRelationshipItemProvider singleTableRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.SingleTableRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleTableRelationshipAdapter() {
		if (singleTableRelationshipItemProvider == null) {
			singleTableRelationshipItemProvider = new SingleTableRelationshipItemProvider(this);
		}

		return singleTableRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.PLSQLRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PLSQLRelationshipItemProvider plsqlRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.PLSQLRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPLSQLRelationshipAdapter() {
		if (plsqlRelationshipItemProvider == null) {
			plsqlRelationshipItemProvider = new PLSQLRelationshipItemProvider(this);
		}

		return plsqlRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.oracleforms.NumberOfFormsPerModuleMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberOfFormsPerModuleMeasureItemProvider numberOfFormsPerModuleMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link universal.oracleforms.NumberOfFormsPerModuleMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberOfFormsPerModuleMeasureAdapter() {
		if (numberOfFormsPerModuleMeasureItemProvider == null) {
			numberOfFormsPerModuleMeasureItemProvider = new NumberOfFormsPerModuleMeasureItemProvider(this);
		}

		return numberOfFormsPerModuleMeasureItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (formItemProvider != null) formItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (oracleFormsAppItemProvider != null) oracleFormsAppItemProvider.dispose();
		if (moduleRelationshipItemProvider != null) moduleRelationshipItemProvider.dispose();
		if (formCallRelationshipItemProvider != null) formCallRelationshipItemProvider.dispose();
		if (masterDetailRelationshipItemProvider != null) masterDetailRelationshipItemProvider.dispose();
		if (detailTableRelationshipItemProvider != null) detailTableRelationshipItemProvider.dispose();
		if (singleTableRelationshipItemProvider != null) singleTableRelationshipItemProvider.dispose();
		if (plsqlRelationshipItemProvider != null) plsqlRelationshipItemProvider.dispose();
		if (numberOfFormsPerModuleMeasureItemProvider != null) numberOfFormsPerModuleMeasureItemProvider.dispose();
	}

}
