/**
 */
package universal.metrics.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import universal.metrics.util.MetricsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetricsItemProviderAdapterFactory extends MetricsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetricsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.Measurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasurementItemProvider measurementItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.Measurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasurementAdapter() {
		if (measurementItemProvider == null) {
			measurementItemProvider = new MeasurementItemProvider(this);
		}

		return measurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.Grade} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GradeItemProvider gradeItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.Grade}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGradeAdapter() {
		if (gradeItemProvider == null) {
			gradeItemProvider = new GradeItemProvider(this);
		}

		return gradeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.DimensionalMeasurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionalMeasurementItemProvider dimensionalMeasurementItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.DimensionalMeasurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionalMeasurementAdapter() {
		if (dimensionalMeasurementItemProvider == null) {
			dimensionalMeasurementItemProvider = new DimensionalMeasurementItemProvider(this);
		}

		return dimensionalMeasurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.DimensionalToObjectMeasurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionalToObjectMeasurementItemProvider dimensionalToObjectMeasurementItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.DimensionalToObjectMeasurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionalToObjectMeasurementAdapter() {
		if (dimensionalToObjectMeasurementItemProvider == null) {
			dimensionalToObjectMeasurementItemProvider = new DimensionalToObjectMeasurementItemProvider(this);
		}

		return dimensionalToObjectMeasurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.Measure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureItemProvider measureItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.Measure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureAdapter() {
		if (measureItemProvider == null) {
			measureItemProvider = new MeasureItemProvider(this);
		}

		return measureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.SimplifiedDecisionMetrics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimplifiedDecisionMetricsItemProvider simplifiedDecisionMetricsItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.SimplifiedDecisionMetrics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimplifiedDecisionMetricsAdapter() {
		if (simplifiedDecisionMetricsItemProvider == null) {
			simplifiedDecisionMetricsItemProvider = new SimplifiedDecisionMetricsItemProvider(this);
		}

		return simplifiedDecisionMetricsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.Observations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObservationsItemProvider observationsItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.Observations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObservationsAdapter() {
		if (observationsItemProvider == null) {
			observationsItemProvider = new ObservationsItemProvider(this);
		}

		return observationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link universal.metrics.NumberLinesMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberLinesMeasureItemProvider numberLinesMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link universal.metrics.NumberLinesMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberLinesMeasureAdapter() {
		if (numberLinesMeasureItemProvider == null) {
			numberLinesMeasureItemProvider = new NumberLinesMeasureItemProvider(this);
		}

		return numberLinesMeasureItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (measurementItemProvider != null) measurementItemProvider.dispose();
		if (gradeItemProvider != null) gradeItemProvider.dispose();
		if (dimensionalMeasurementItemProvider != null) dimensionalMeasurementItemProvider.dispose();
		if (dimensionalToObjectMeasurementItemProvider != null) dimensionalToObjectMeasurementItemProvider.dispose();
		if (measureItemProvider != null) measureItemProvider.dispose();
		if (simplifiedDecisionMetricsItemProvider != null) simplifiedDecisionMetricsItemProvider.dispose();
		if (observationsItemProvider != null) observationsItemProvider.dispose();
		if (numberLinesMeasureItemProvider != null) numberLinesMeasureItemProvider.dispose();
	}

}
