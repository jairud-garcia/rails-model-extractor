/*
 * generated by Xtext 2.10.0
 */
package co.gruposaberes.rails.parser.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ModelsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCLASS_WORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNamespacedModuleNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cSPACETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cSuperTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSuperTypeNamespacedModuleNameParserRuleCall_3_3_0 = (RuleCall)cSuperTypeAssignment_3_3.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cClassElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassElementsClassElementParserRuleCall_5_0 = (RuleCall)cClassElementsAssignment_5.eContents().get(0);
		
		//Class RubyClass:
		//	CLASS_WORD SPACE* name=NamespacedModuleName (SPACE* '<' SPACE* superType=NamespacedModuleName)? SPACE*
		//	classElements+=ClassElement*
		@Override public ParserRule getRule() { return rule; }
		
		//CLASS_WORD SPACE* name=NamespacedModuleName (SPACE* '<' SPACE* superType=NamespacedModuleName)? SPACE*
		//classElements+=ClassElement*
		public Group getGroup() { return cGroup; }
		
		//CLASS_WORD
		public RuleCall getCLASS_WORDTerminalRuleCall_0() { return cCLASS_WORDTerminalRuleCall_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }
		
		//name=NamespacedModuleName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NamespacedModuleName
		public RuleCall getNameNamespacedModuleNameParserRuleCall_2_0() { return cNameNamespacedModuleNameParserRuleCall_2_0; }
		
		//(SPACE* '<' SPACE* superType=NamespacedModuleName)?
		public Group getGroup_3() { return cGroup_3; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_3_0() { return cSPACETerminalRuleCall_3_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_1() { return cLessThanSignKeyword_3_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_3_2() { return cSPACETerminalRuleCall_3_2; }
		
		//superType=NamespacedModuleName
		public Assignment getSuperTypeAssignment_3_3() { return cSuperTypeAssignment_3_3; }
		
		//NamespacedModuleName
		public RuleCall getSuperTypeNamespacedModuleNameParserRuleCall_3_3_0() { return cSuperTypeNamespacedModuleNameParserRuleCall_3_3_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//classElements+=ClassElement*
		public Assignment getClassElementsAssignment_5() { return cClassElementsAssignment_5; }
		
		//ClassElement
		public RuleCall getClassElementsClassElementParserRuleCall_5_0() { return cClassElementsClassElementParserRuleCall_5_0; }
	}
	public class ClassElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.ClassElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cRelationshipParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cTableNameParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cOperationsChainParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassElement:
		//	-> (Method | -> Relationship | TableName) | OperationsChain;
		@Override public ParserRule getRule() { return rule; }
		
		//-> (Method | -> Relationship | TableName) | OperationsChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//-> (Method | -> Relationship | TableName)
		public Group getGroup_0() { return cGroup_0; }
		
		//(Method | -> Relationship | TableName)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//Method
		public RuleCall getMethodParserRuleCall_0_0_0() { return cMethodParserRuleCall_0_0_0; }
		
		//-> Relationship
		public RuleCall getRelationshipParserRuleCall_0_0_1() { return cRelationshipParserRuleCall_0_0_1; }
		
		//TableName
		public RuleCall getTableNameParserRuleCall_0_0_2() { return cTableNameParserRuleCall_0_0_2; }
		
		//OperationsChain
		public RuleCall getOperationsChainParserRuleCall_1() { return cOperationsChainParserRuleCall_1; }
	}
	public class TableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.TableName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSET_TABLE_NAMETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TableName:
		//	SET_TABLE_NAME name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//SET_TABLE_NAME name=STRING
		public Group getGroup() { return cGroup; }
		
		//SET_TABLE_NAME
		public RuleCall getSET_TABLE_NAMETerminalRuleCall_0() { return cSET_TABLE_NAMETerminalRuleCall_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSYMBOLTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cARRAY_BLOCKTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cPARENTHESIS_BLOCKTerminalRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cBRACKET_BLOCKTerminalRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		private final RuleCall cDECIMALTerminalRuleCall_2_5 = (RuleCall)cAlternatives_2.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_2_6 = (RuleCall)cAlternatives_2.eContents().get(6);
		private final RuleCall cREGEXPTerminalRuleCall_2_7 = (RuleCall)cAlternatives_2.eContents().get(7);
		private final RuleCall cMethodChainCallParserRuleCall_2_8 = (RuleCall)cAlternatives_2.eContents().get(8);
		
		//Assignment:
		//	ID '=' (SYMBOL | STRING | ARRAY_BLOCK | PARENTHESIS_BLOCK | BRACKET_BLOCK | DECIMAL | INT | REGEXP | MethodChainCall);
		@Override public ParserRule getRule() { return rule; }
		
		//ID '=' (SYMBOL | STRING | ARRAY_BLOCK | PARENTHESIS_BLOCK | BRACKET_BLOCK | DECIMAL | INT | REGEXP | MethodChainCall)
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(SYMBOL | STRING | ARRAY_BLOCK | PARENTHESIS_BLOCK | BRACKET_BLOCK | DECIMAL | INT | REGEXP | MethodChainCall)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2_0() { return cSYMBOLTerminalRuleCall_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }
		
		//ARRAY_BLOCK
		public RuleCall getARRAY_BLOCKTerminalRuleCall_2_2() { return cARRAY_BLOCKTerminalRuleCall_2_2; }
		
		//PARENTHESIS_BLOCK
		public RuleCall getPARENTHESIS_BLOCKTerminalRuleCall_2_3() { return cPARENTHESIS_BLOCKTerminalRuleCall_2_3; }
		
		//BRACKET_BLOCK
		public RuleCall getBRACKET_BLOCKTerminalRuleCall_2_4() { return cBRACKET_BLOCKTerminalRuleCall_2_4; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_2_5() { return cDECIMALTerminalRuleCall_2_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_6() { return cINTTerminalRuleCall_2_6; }
		
		//REGEXP
		public RuleCall getREGEXPTerminalRuleCall_2_7() { return cREGEXPTerminalRuleCall_2_7; }
		
		//MethodChainCall
		public RuleCall getMethodChainCallParserRuleCall_2_8() { return cMethodChainCallParserRuleCall_2_8; }
	}
	public class NamespacedModuleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.NamespacedModuleName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////Require:
		////  REQUIRE_WORD SPACE* STRING SPACE*
		////;
		//NamespacedModuleName:
		//	(ID '::')* ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID '::')* ID
		public Group getGroup() { return cGroup; }
		
		//(ID '::')*
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class MethodChainCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.MethodChainCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cINT_METHODTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cPARENTHESIS_BLOCKTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cARRAY_BLOCKTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cNamespacedModuleNameParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cPARENTHESIS_BLOCKTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cMethodCallParametersParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cBRACKET_BLOCKTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cDO_BLOCK_PARAMETERSTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cSPACETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cLFTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//MethodChainCall:
		//	(SYMBOL | STRING | INT | INT_METHOD | PARENTHESIS_BLOCK | ARRAY_BLOCK | NamespacedModuleName) ('.' ID
		//	PARENTHESIS_BLOCK?)* SPACE* MethodCallParameters? => SPACE*
		//	BRACKET_BLOCK? => SPACE* DO_BLOCK_PARAMETERS? => SPACE* => LF?;
		@Override public ParserRule getRule() { return rule; }
		
		//(SYMBOL | STRING | INT | INT_METHOD | PARENTHESIS_BLOCK | ARRAY_BLOCK | NamespacedModuleName) ('.' ID
		//PARENTHESIS_BLOCK?)* SPACE* MethodCallParameters? => SPACE* BRACKET_BLOCK? => SPACE* DO_BLOCK_PARAMETERS? => SPACE* =>
		//LF?
		public Group getGroup() { return cGroup; }
		
		//(SYMBOL | STRING | INT | INT_METHOD | PARENTHESIS_BLOCK | ARRAY_BLOCK | NamespacedModuleName)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_0_0() { return cSYMBOLTerminalRuleCall_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//INT_METHOD
		public RuleCall getINT_METHODTerminalRuleCall_0_3() { return cINT_METHODTerminalRuleCall_0_3; }
		
		//PARENTHESIS_BLOCK
		public RuleCall getPARENTHESIS_BLOCKTerminalRuleCall_0_4() { return cPARENTHESIS_BLOCKTerminalRuleCall_0_4; }
		
		//ARRAY_BLOCK
		public RuleCall getARRAY_BLOCKTerminalRuleCall_0_5() { return cARRAY_BLOCKTerminalRuleCall_0_5; }
		
		//NamespacedModuleName
		public RuleCall getNamespacedModuleNameParserRuleCall_0_6() { return cNamespacedModuleNameParserRuleCall_0_6; }
		
		//('.' ID PARENTHESIS_BLOCK?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//PARENTHESIS_BLOCK?
		public RuleCall getPARENTHESIS_BLOCKTerminalRuleCall_1_2() { return cPARENTHESIS_BLOCKTerminalRuleCall_1_2; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
		
		//MethodCallParameters?
		public RuleCall getMethodCallParametersParserRuleCall_3() { return cMethodCallParametersParserRuleCall_3; }
		
		//=> SPACE*
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//BRACKET_BLOCK?
		public RuleCall getBRACKET_BLOCKTerminalRuleCall_5() { return cBRACKET_BLOCKTerminalRuleCall_5; }
		
		//=> SPACE*
		public RuleCall getSPACETerminalRuleCall_6() { return cSPACETerminalRuleCall_6; }
		
		//DO_BLOCK_PARAMETERS?
		public RuleCall getDO_BLOCK_PARAMETERSTerminalRuleCall_7() { return cDO_BLOCK_PARAMETERSTerminalRuleCall_7; }
		
		//=> SPACE*
		public RuleCall getSPACETerminalRuleCall_8() { return cSPACETerminalRuleCall_8; }
		
		//=> LF?
		public RuleCall getLFTerminalRuleCall_9() { return cLFTerminalRuleCall_9; }
	}
	public class MethodCallParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.MethodCallParameters");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPARENTHESIS_BLOCKTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionsSeparatedByCommasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MethodCallParameters:
		//	PARENTHESIS_BLOCK | ExpressionsSeparatedByCommas;
		@Override public ParserRule getRule() { return rule; }
		
		//PARENTHESIS_BLOCK | ExpressionsSeparatedByCommas
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PARENTHESIS_BLOCK
		public RuleCall getPARENTHESIS_BLOCKTerminalRuleCall_0() { return cPARENTHESIS_BLOCKTerminalRuleCall_0; }
		
		//ExpressionsSeparatedByCommas
		public RuleCall getExpressionsSeparatedByCommasParserRuleCall_1() { return cExpressionsSeparatedByCommasParserRuleCall_1; }
	}
	public class ExpressionsSeparatedByCommasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.ExpressionsSeparatedByCommas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionWithOutBracketParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final RuleCall cLFTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		
		//ExpressionsSeparatedByCommas:
		//	ExpressionWithOutBracket (SPACE* COMMA (SPACE* LF)? SPACE* Expression)*
		//	// => SPACE* BS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionWithOutBracket (SPACE* COMMA (SPACE* LF)? SPACE* Expression)*
		public Group getGroup() { return cGroup; }
		
		//ExpressionWithOutBracket
		public RuleCall getExpressionWithOutBracketParserRuleCall_0() { return cExpressionWithOutBracketParserRuleCall_0; }
		
		//(SPACE* COMMA (SPACE* LF)? SPACE* Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1_0() { return cSPACETerminalRuleCall_1_0; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_1() { return cCOMMATerminalRuleCall_1_1; }
		
		//(SPACE* LF)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1_2_0() { return cSPACETerminalRuleCall_1_2_0; }
		
		//LF
		public RuleCall getLFTerminalRuleCall_1_2_1() { return cLFTerminalRuleCall_1_2_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1_3() { return cSPACETerminalRuleCall_1_3; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_4() { return cExpressionParserRuleCall_1_4; }
	}
	public class ExpressionWithOutBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.ExpressionWithOutBracket");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cARRAY_BLOCKTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPARENTHESIS_BLOCKTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDECIMALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cREGEXPTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMethodChainCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIgnoredHashKeyValueParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//ExpressionWithOutBracket:
		//	SYMBOL | STRING | ARRAY_BLOCK | PARENTHESIS_BLOCK | DECIMAL | INT | REGEXP | MethodChainCall | IgnoredHashKeyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//SYMBOL | STRING | ARRAY_BLOCK | PARENTHESIS_BLOCK | DECIMAL | INT | REGEXP | MethodChainCall | IgnoredHashKeyValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_0() { return cSYMBOLTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//ARRAY_BLOCK
		public RuleCall getARRAY_BLOCKTerminalRuleCall_2() { return cARRAY_BLOCKTerminalRuleCall_2; }
		
		//PARENTHESIS_BLOCK
		public RuleCall getPARENTHESIS_BLOCKTerminalRuleCall_3() { return cPARENTHESIS_BLOCKTerminalRuleCall_3; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_4() { return cDECIMALTerminalRuleCall_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
		
		//REGEXP
		public RuleCall getREGEXPTerminalRuleCall_6() { return cREGEXPTerminalRuleCall_6; }
		
		//MethodChainCall
		public RuleCall getMethodChainCallParserRuleCall_7() { return cMethodChainCallParserRuleCall_7; }
		
		//IgnoredHashKeyValue
		public RuleCall getIgnoredHashKeyValueParserRuleCall_8() { return cIgnoredHashKeyValueParserRuleCall_8; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionWithOutBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBRACKET_BLOCKTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	ExpressionWithOutBracket | BRACKET_BLOCK;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionWithOutBracket | BRACKET_BLOCK
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionWithOutBracket
		public RuleCall getExpressionWithOutBracketParserRuleCall_0() { return cExpressionWithOutBracketParserRuleCall_0; }
		
		//BRACKET_BLOCK
		public RuleCall getBRACKET_BLOCKTerminalRuleCall_1() { return cBRACKET_BLOCKTerminalRuleCall_1; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cRelationTypeAlternatives_0_0 = (Alternatives)cRelationTypeAssignment_0.eContents().get(0);
		private final RuleCall cRelationTypeHAS_MANY_WORDTerminalRuleCall_0_0_0 = (RuleCall)cRelationTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cRelationTypeHAS_ONE_WORDTerminalRuleCall_0_0_1 = (RuleCall)cRelationTypeAlternatives_0_0.eContents().get(1);
		private final RuleCall cRelationTypeHAS_AND_BELONGS_TO_MANY_WORDTerminalRuleCall_0_0_2 = (RuleCall)cRelationTypeAlternatives_0_0.eContents().get(2);
		private final RuleCall cRelationTypeBELONGS_TO_WORDTerminalRuleCall_0_0_3 = (RuleCall)cRelationTypeAlternatives_0_0.eContents().get(3);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameSYMBOLTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cOptionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionsHashKeyValueParserRuleCall_4_0 = (RuleCall)cOptionsAssignment_4.eContents().get(0);
		
		//Relationship:
		//	relationType=(HAS_MANY_WORD | HAS_ONE_WORD | HAS_AND_BELONGS_TO_MANY_WORD | BELONGS_TO_WORD) SPACE* name=(SYMBOL |
		//	STRING) SPACE* options+=HashKeyValue*;
		@Override public ParserRule getRule() { return rule; }
		
		//relationType=(HAS_MANY_WORD | HAS_ONE_WORD | HAS_AND_BELONGS_TO_MANY_WORD | BELONGS_TO_WORD) SPACE* name=(SYMBOL |
		//STRING) SPACE* options+=HashKeyValue*
		public Group getGroup() { return cGroup; }
		
		//relationType=(HAS_MANY_WORD | HAS_ONE_WORD | HAS_AND_BELONGS_TO_MANY_WORD | BELONGS_TO_WORD)
		public Assignment getRelationTypeAssignment_0() { return cRelationTypeAssignment_0; }
		
		//(HAS_MANY_WORD | HAS_ONE_WORD | HAS_AND_BELONGS_TO_MANY_WORD | BELONGS_TO_WORD)
		public Alternatives getRelationTypeAlternatives_0_0() { return cRelationTypeAlternatives_0_0; }
		
		//HAS_MANY_WORD
		public RuleCall getRelationTypeHAS_MANY_WORDTerminalRuleCall_0_0_0() { return cRelationTypeHAS_MANY_WORDTerminalRuleCall_0_0_0; }
		
		//HAS_ONE_WORD
		public RuleCall getRelationTypeHAS_ONE_WORDTerminalRuleCall_0_0_1() { return cRelationTypeHAS_ONE_WORDTerminalRuleCall_0_0_1; }
		
		//HAS_AND_BELONGS_TO_MANY_WORD
		public RuleCall getRelationTypeHAS_AND_BELONGS_TO_MANY_WORDTerminalRuleCall_0_0_2() { return cRelationTypeHAS_AND_BELONGS_TO_MANY_WORDTerminalRuleCall_0_0_2; }
		
		//BELONGS_TO_WORD
		public RuleCall getRelationTypeBELONGS_TO_WORDTerminalRuleCall_0_0_3() { return cRelationTypeBELONGS_TO_WORDTerminalRuleCall_0_0_3; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }
		
		//name=(SYMBOL | STRING)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(SYMBOL | STRING)
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_2_0_0() { return cNameSYMBOLTerminalRuleCall_2_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_1() { return cNameSTRINGTerminalRuleCall_2_0_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }
		
		//options+=HashKeyValue*
		public Assignment getOptionsAssignment_4() { return cOptionsAssignment_4; }
		
		//HashKeyValue
		public RuleCall getOptionsHashKeyValueParserRuleCall_4_0() { return cOptionsHashKeyValueParserRuleCall_4_0; }
	}
	public class HashKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.HashKeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cLFTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cKeyAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_3_0_0_0 = (RuleCall)cKeyAssignment_3_0_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cKeyAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Alternatives cKeyAlternatives_3_1_0_0 = (Alternatives)cKeyAssignment_3_1_0.eContents().get(0);
		private final RuleCall cKeySYMBOLTerminalRuleCall_3_1_0_0_0 = (RuleCall)cKeyAlternatives_3_1_0_0.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_3_1_0_0_1 = (RuleCall)cKeyAlternatives_3_1_0_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cValueAlternatives_5_0 = (Alternatives)cValueAssignment_5.eContents().get(0);
		private final RuleCall cValueSYMBOLTerminalRuleCall_5_0_0 = (RuleCall)cValueAlternatives_5_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_0_1 = (RuleCall)cValueAlternatives_5_0.eContents().get(1);
		private final RuleCall cValueBRACKET_BLOCKTerminalRuleCall_5_0_2 = (RuleCall)cValueAlternatives_5_0.eContents().get(2);
		private final RuleCall cValueARRAY_BLOCKTerminalRuleCall_5_0_3 = (RuleCall)cValueAlternatives_5_0.eContents().get(3);
		private final RuleCall cValueDECIMALTerminalRuleCall_5_0_4 = (RuleCall)cValueAlternatives_5_0.eContents().get(4);
		private final RuleCall cValueINTTerminalRuleCall_5_0_5 = (RuleCall)cValueAlternatives_5_0.eContents().get(5);
		private final RuleCall cValueINT_METHODTerminalRuleCall_5_0_6 = (RuleCall)cValueAlternatives_5_0.eContents().get(6);
		private final RuleCall cValueMethodChainCallParserRuleCall_5_0_7 = (RuleCall)cValueAlternatives_5_0.eContents().get(7);
		private final RuleCall cSPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//HashKeyValue:
		//	COMMA SPACE* (LF SPACE*)? (key=ID ':' | key=(SYMBOL | STRING) SPACE* '=>') SPACE* value=(SYMBOL | STRING |
		//	BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT | INT_METHOD | MethodChainCall) SPACE*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA SPACE* (LF SPACE*)? (key=ID ':' | key=(SYMBOL | STRING) SPACE* '=>') SPACE* value=(SYMBOL | STRING | BRACKET_BLOCK
		//| ARRAY_BLOCK | DECIMAL | INT | INT_METHOD | MethodChainCall) SPACE*
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }
		
		//(LF SPACE*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//LF
		public RuleCall getLFTerminalRuleCall_2_0() { return cLFTerminalRuleCall_2_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_2_1() { return cSPACETerminalRuleCall_2_1; }
		
		//(key=ID ':' | key=(SYMBOL | STRING) SPACE* '=>')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//key=ID ':'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//key=ID
		public Assignment getKeyAssignment_3_0_0() { return cKeyAssignment_3_0_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_3_0_0_0() { return cKeyIDTerminalRuleCall_3_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }
		
		//key=(SYMBOL | STRING) SPACE* '=>'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//key=(SYMBOL | STRING)
		public Assignment getKeyAssignment_3_1_0() { return cKeyAssignment_3_1_0; }
		
		//(SYMBOL | STRING)
		public Alternatives getKeyAlternatives_3_1_0_0() { return cKeyAlternatives_3_1_0_0; }
		
		//SYMBOL
		public RuleCall getKeySYMBOLTerminalRuleCall_3_1_0_0_0() { return cKeySYMBOLTerminalRuleCall_3_1_0_0_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_3_1_0_0_1() { return cKeySTRINGTerminalRuleCall_3_1_0_0_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_3_1_1() { return cSPACETerminalRuleCall_3_1_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3_1_2() { return cEqualsSignGreaterThanSignKeyword_3_1_2; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//value=(SYMBOL | STRING | BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT | INT_METHOD | MethodChainCall)
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//(SYMBOL | STRING | BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT | INT_METHOD | MethodChainCall)
		public Alternatives getValueAlternatives_5_0() { return cValueAlternatives_5_0; }
		
		//SYMBOL
		public RuleCall getValueSYMBOLTerminalRuleCall_5_0_0() { return cValueSYMBOLTerminalRuleCall_5_0_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_0_1() { return cValueSTRINGTerminalRuleCall_5_0_1; }
		
		//BRACKET_BLOCK
		public RuleCall getValueBRACKET_BLOCKTerminalRuleCall_5_0_2() { return cValueBRACKET_BLOCKTerminalRuleCall_5_0_2; }
		
		//ARRAY_BLOCK
		public RuleCall getValueARRAY_BLOCKTerminalRuleCall_5_0_3() { return cValueARRAY_BLOCKTerminalRuleCall_5_0_3; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_5_0_4() { return cValueDECIMALTerminalRuleCall_5_0_4; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0_5() { return cValueINTTerminalRuleCall_5_0_5; }
		
		//INT_METHOD
		public RuleCall getValueINT_METHODTerminalRuleCall_5_0_6() { return cValueINT_METHODTerminalRuleCall_5_0_6; }
		
		//MethodChainCall
		public RuleCall getValueMethodChainCallParserRuleCall_5_0_7() { return cValueMethodChainCallParserRuleCall_5_0_7; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_6() { return cSPACETerminalRuleCall_6; }
	}
	public class IgnoredHashKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.IgnoredHashKeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSYMBOLTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cBRACKET_BLOCKTerminalRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final RuleCall cARRAY_BLOCKTerminalRuleCall_3_3 = (RuleCall)cAlternatives_3.eContents().get(3);
		private final RuleCall cDECIMALTerminalRuleCall_3_4 = (RuleCall)cAlternatives_3.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_3_5 = (RuleCall)cAlternatives_3.eContents().get(5);
		private final RuleCall cINT_METHODTerminalRuleCall_3_6 = (RuleCall)cAlternatives_3.eContents().get(6);
		private final RuleCall cMethodChainCallParserRuleCall_3_7 = (RuleCall)cAlternatives_3.eContents().get(7);
		private final RuleCall cREGEXPTerminalRuleCall_3_8 = (RuleCall)cAlternatives_3.eContents().get(8);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//IgnoredHashKeyValue:
		//	SPACE* (ID ':' | (SYMBOL | STRING) SPACE* '=>') SPACE* (SYMBOL | STRING | BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT
		//	| INT_METHOD | MethodChainCall | REGEXP) SPACE*;
		@Override public ParserRule getRule() { return rule; }
		
		//SPACE* (ID ':' | (SYMBOL | STRING) SPACE* '=>') SPACE* (SYMBOL | STRING | BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT |
		//INT_METHOD | MethodChainCall | REGEXP) SPACE*
		public Group getGroup() { return cGroup; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_0() { return cSPACETerminalRuleCall_0; }
		
		//(ID ':' | (SYMBOL | STRING) SPACE* '=>')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_0() { return cIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//(SYMBOL | STRING) SPACE* '=>'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(SYMBOL | STRING)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_1_1_0_0() { return cSYMBOLTerminalRuleCall_1_1_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_0_1() { return cSTRINGTerminalRuleCall_1_1_0_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1_1_1() { return cSPACETerminalRuleCall_1_1_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1_2() { return cEqualsSignGreaterThanSignKeyword_1_1_2; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
		
		//(SYMBOL | STRING | BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT | INT_METHOD | MethodChainCall | REGEXP)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_3_0() { return cSYMBOLTerminalRuleCall_3_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_1() { return cSTRINGTerminalRuleCall_3_1; }
		
		//BRACKET_BLOCK
		public RuleCall getBRACKET_BLOCKTerminalRuleCall_3_2() { return cBRACKET_BLOCKTerminalRuleCall_3_2; }
		
		//ARRAY_BLOCK
		public RuleCall getARRAY_BLOCKTerminalRuleCall_3_3() { return cARRAY_BLOCKTerminalRuleCall_3_3; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_3_4() { return cDECIMALTerminalRuleCall_3_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_5() { return cINTTerminalRuleCall_3_5; }
		
		//INT_METHOD
		public RuleCall getINT_METHODTerminalRuleCall_3_6() { return cINT_METHODTerminalRuleCall_3_6; }
		
		//MethodChainCall
		public RuleCall getMethodChainCallParserRuleCall_3_7() { return cMethodChainCallParserRuleCall_3_7; }
		
		//REGEXP
		public RuleCall getREGEXPTerminalRuleCall_3_8() { return cREGEXPTerminalRuleCall_3_8; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEF_WORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameMethodNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPARENTHESIS_BLOCKTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cLFTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Method RubyMethod:
		//	DEF_WORD SPACE* name=MethodName SPACE* PARENTHESIS_BLOCK? SPACE* LF?
		@Override public ParserRule getRule() { return rule; }
		
		//DEF_WORD SPACE* name=MethodName SPACE* PARENTHESIS_BLOCK? SPACE* LF?
		public Group getGroup() { return cGroup; }
		
		//DEF_WORD
		public RuleCall getDEF_WORDTerminalRuleCall_0() { return cDEF_WORDTerminalRuleCall_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }
		
		//name=MethodName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//MethodName
		public RuleCall getNameMethodNameParserRuleCall_2_0() { return cNameMethodNameParserRuleCall_2_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }
		
		//PARENTHESIS_BLOCK?
		public RuleCall getPARENTHESIS_BLOCKTerminalRuleCall_4() { return cPARENTHESIS_BLOCKTerminalRuleCall_4; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_5() { return cSPACETerminalRuleCall_5; }
		
		//LF?
		public RuleCall getLFTerminalRuleCall_6() { return cLFTerminalRuleCall_6; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.MethodName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cNamespacedModuleNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//MethodName:
		//	(NamespacedModuleName '.')? ID ('?' | '=')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(NamespacedModuleName '.')? ID ('?' | '=')?
		public Group getGroup() { return cGroup; }
		
		//(NamespacedModuleName '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//NamespacedModuleName
		public RuleCall getNamespacedModuleNameParserRuleCall_0_0() { return cNamespacedModuleNameParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('?' | '=')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_0() { return cQuestionMarkKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
	}
	public class OperationsChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.OperationsChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMethodChainCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOperatorRuleParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cBRACKET_BLOCKTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cMethodChainCallParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cREGEXPTerminalRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		
		//OperationsChain:
		//	MethodChainCall (OperatorRule (BRACKET_BLOCK | DECIMAL | MethodChainCall | REGEXP))*;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodChainCall (OperatorRule (BRACKET_BLOCK | DECIMAL | MethodChainCall | REGEXP))*
		public Group getGroup() { return cGroup; }
		
		//MethodChainCall
		public RuleCall getMethodChainCallParserRuleCall_0() { return cMethodChainCallParserRuleCall_0; }
		
		//(OperatorRule (BRACKET_BLOCK | DECIMAL | MethodChainCall | REGEXP))*
		public Group getGroup_1() { return cGroup_1; }
		
		//OperatorRule
		public RuleCall getOperatorRuleParserRuleCall_1_0() { return cOperatorRuleParserRuleCall_1_0; }
		
		//(BRACKET_BLOCK | DECIMAL | MethodChainCall | REGEXP)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//BRACKET_BLOCK
		public RuleCall getBRACKET_BLOCKTerminalRuleCall_1_1_0() { return cBRACKET_BLOCKTerminalRuleCall_1_1_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1; }
		
		//MethodChainCall
		public RuleCall getMethodChainCallParserRuleCall_1_1_2() { return cMethodChainCallParserRuleCall_1_1_2; }
		
		//REGEXP
		public RuleCall getREGEXPTerminalRuleCall_1_1_3() { return cREGEXPTerminalRuleCall_1_1_3; }
	}
	public class OperatorRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.OperatorRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonSpaceKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cPlusSignKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cAsteriskKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cSolidusKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cPercentSignKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cAsteriskAsteriskKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cEqualsSignKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Keyword cTildeKeyword_0_11 = (Keyword)cAlternatives_0.eContents().get(11);
		private final Keyword cVerticalLineKeyword_0_12 = (Keyword)cAlternatives_0.eContents().get(12);
		private final Keyword cVerticalLineVerticalLineKeyword_0_13 = (Keyword)cAlternatives_0.eContents().get(13);
		private final Keyword cAmpersandKeyword_0_14 = (Keyword)cAlternatives_0.eContents().get(14);
		private final Keyword cAmpersandAmpersandKeyword_0_15 = (Keyword)cAlternatives_0.eContents().get(15);
		private final Keyword cEqualsSignEqualsSignKeyword_0_16 = (Keyword)cAlternatives_0.eContents().get(16);
		private final Keyword cExclamationMarkKeyword_0_17 = (Keyword)cAlternatives_0.eContents().get(17);
		private final Keyword cLessThanSignLessThanSignKeyword_0_18 = (Keyword)cAlternatives_0.eContents().get(18);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_0_19 = (Keyword)cAlternatives_0.eContents().get(19);
		private final Keyword cGreaterThanSignKeyword_0_20 = (Keyword)cAlternatives_0.eContents().get(20);
		private final Keyword cFullStopFullStopKeyword_0_21 = (Keyword)cAlternatives_0.eContents().get(21);
		private final Keyword cFullStopFullStopFullStopKeyword_0_22 = (Keyword)cAlternatives_0.eContents().get(22);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OperatorRule:
		//	(': ' | '?' | '<=' | '<' | '+' | '-' | '*' | '/' | '%' | '**' | '=' | '~' | '|' | '||' | '&' | '&&' | '==' | '!' |
		//	'<<' | '<=>' | '>' | '..' | '...') '='?;
		@Override public ParserRule getRule() { return rule; }
		
		//(': ' | '?' | '<=' | '<' | '+' | '-' | '*' | '/' | '%' | '**' | '=' | '~' | '|' | '||' | '&' | '&&' | '==' | '!' | '<<'
		//| '<=>' | '>' | '..' | '...') '='?
		public Group getGroup() { return cGroup; }
		
		//(': ' | '?' | '<=' | '<' | '+' | '-' | '*' | '/' | '%' | '**' | '=' | '~' | '|' | '||' | '&' | '&&' | '==' | '!' | '<<'
		//| '<=>' | '>' | '..' | '...')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//': '
		public Keyword getColonSpaceKeyword_0_0() { return cColonSpaceKeyword_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0_1() { return cQuestionMarkKeyword_0_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0_2() { return cLessThanSignEqualsSignKeyword_0_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_3() { return cLessThanSignKeyword_0_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_4() { return cPlusSignKeyword_0_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_5() { return cHyphenMinusKeyword_0_5; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_6() { return cAsteriskKeyword_0_6; }
		
		//'/'
		public Keyword getSolidusKeyword_0_7() { return cSolidusKeyword_0_7; }
		
		//'%'
		public Keyword getPercentSignKeyword_0_8() { return cPercentSignKeyword_0_8; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_0_9() { return cAsteriskAsteriskKeyword_0_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_10() { return cEqualsSignKeyword_0_10; }
		
		//'~'
		public Keyword getTildeKeyword_0_11() { return cTildeKeyword_0_11; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_12() { return cVerticalLineKeyword_0_12; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_0_13() { return cVerticalLineVerticalLineKeyword_0_13; }
		
		//'&'
		public Keyword getAmpersandKeyword_0_14() { return cAmpersandKeyword_0_14; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0_15() { return cAmpersandAmpersandKeyword_0_15; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0_16() { return cEqualsSignEqualsSignKeyword_0_16; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_17() { return cExclamationMarkKeyword_0_17; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0_18() { return cLessThanSignLessThanSignKeyword_0_18; }
		
		//'<=>'
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_0_19() { return cLessThanSignEqualsSignGreaterThanSignKeyword_0_19; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_20() { return cGreaterThanSignKeyword_0_20; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0_21() { return cFullStopFullStopKeyword_0_21; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_0_22() { return cFullStopFullStopFullStopKeyword_0_22; }
		
		//'='?
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	
	
	private final ClassElements pClass;
	private final ClassElementElements pClassElement;
	private final TableNameElements pTableName;
	private final AssignmentElements pAssignment;
	private final NamespacedModuleNameElements pNamespacedModuleName;
	private final MethodChainCallElements pMethodChainCall;
	private final MethodCallParametersElements pMethodCallParameters;
	private final ExpressionsSeparatedByCommasElements pExpressionsSeparatedByCommas;
	private final ExpressionWithOutBracketElements pExpressionWithOutBracket;
	private final ExpressionElements pExpression;
	private final RelationshipElements pRelationship;
	private final HashKeyValueElements pHashKeyValue;
	private final IgnoredHashKeyValueElements pIgnoredHashKeyValue;
	private final MethodElements pMethod;
	private final MethodNameElements pMethodName;
	private final OperationsChainElements pOperationsChain;
	private final OperatorRuleElements pOperatorRule;
	private final TerminalRule tCOMMA;
	private final TerminalRule tSPACE;
	private final TerminalRule tNOT_BRACKET_SEQ;
	private final TerminalRule tFIRST_LEVEL_BRACKET_BLOCK;
	private final TerminalRule tSECOND_LEVEL_BRACKET_BLOCK;
	private final TerminalRule tTHIRD_LEVEL_BRACKET_BLOCK;
	private final TerminalRule tBRACKET_BLOCK;
	private final TerminalRule tNOT_ARRAY_SEQ;
	private final TerminalRule tFIRST_LEVEL_ARRAY_BLOCK;
	private final TerminalRule tSECOND_LEVEL_ARRAY_BLOCK;
	private final TerminalRule tTHIRD_LEVEL_ARRAY_BLOCK;
	private final TerminalRule tARRAY_BLOCK;
	private final TerminalRule tNOT_PARENTHESIS_SEQ;
	private final TerminalRule tFIRST_LEVEL_PARENTHESIS_BLOCK;
	private final TerminalRule tSECOND_LEVEL_PARENTHESIS_BLOCK;
	private final TerminalRule tTHIRD_LEVEL_PARENTHESIS_BLOCK;
	private final TerminalRule tPARENTHESIS_BLOCK;
	private final TerminalRule tDO_BLOCK_PARAMETERS;
	private final TerminalRule tBELONGS_TO_WORD;
	private final TerminalRule tHAS_MANY_WORD;
	private final TerminalRule tHAS_ONE_WORD;
	private final TerminalRule tHAS_AND_BELONGS_TO_MANY_WORD;
	private final TerminalRule tSET_TABLE_NAME;
	private final TerminalRule tMODULE_WORD;
	private final TerminalRule tCLASS_WORD;
	private final TerminalRule tDEF_WORD;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tINT;
	private final TerminalRule tINT_METHOD;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tREGEXP;
	private final TerminalRule tLF;
	private final TerminalRule tCR;
	private final TerminalRule tREQUIRE;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ModelsGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pClass = new ClassElements();
		this.pClassElement = new ClassElementElements();
		this.pTableName = new TableNameElements();
		this.pAssignment = new AssignmentElements();
		this.pNamespacedModuleName = new NamespacedModuleNameElements();
		this.pMethodChainCall = new MethodChainCallElements();
		this.pMethodCallParameters = new MethodCallParametersElements();
		this.pExpressionsSeparatedByCommas = new ExpressionsSeparatedByCommasElements();
		this.pExpressionWithOutBracket = new ExpressionWithOutBracketElements();
		this.pExpression = new ExpressionElements();
		this.pRelationship = new RelationshipElements();
		this.pHashKeyValue = new HashKeyValueElements();
		this.pIgnoredHashKeyValue = new IgnoredHashKeyValueElements();
		this.pMethod = new MethodElements();
		this.pMethodName = new MethodNameElements();
		this.pOperationsChain = new OperationsChainElements();
		this.pOperatorRule = new OperatorRuleElements();
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.COMMA");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.SPACE");
		this.tNOT_BRACKET_SEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.NOT_BRACKET_SEQ");
		this.tFIRST_LEVEL_BRACKET_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.FIRST_LEVEL_BRACKET_BLOCK");
		this.tSECOND_LEVEL_BRACKET_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.SECOND_LEVEL_BRACKET_BLOCK");
		this.tTHIRD_LEVEL_BRACKET_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.THIRD_LEVEL_BRACKET_BLOCK");
		this.tBRACKET_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.BRACKET_BLOCK");
		this.tNOT_ARRAY_SEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.NOT_ARRAY_SEQ");
		this.tFIRST_LEVEL_ARRAY_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.FIRST_LEVEL_ARRAY_BLOCK");
		this.tSECOND_LEVEL_ARRAY_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.SECOND_LEVEL_ARRAY_BLOCK");
		this.tTHIRD_LEVEL_ARRAY_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.THIRD_LEVEL_ARRAY_BLOCK");
		this.tARRAY_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.ARRAY_BLOCK");
		this.tNOT_PARENTHESIS_SEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.NOT_PARENTHESIS_SEQ");
		this.tFIRST_LEVEL_PARENTHESIS_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.FIRST_LEVEL_PARENTHESIS_BLOCK");
		this.tSECOND_LEVEL_PARENTHESIS_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.SECOND_LEVEL_PARENTHESIS_BLOCK");
		this.tTHIRD_LEVEL_PARENTHESIS_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.THIRD_LEVEL_PARENTHESIS_BLOCK");
		this.tPARENTHESIS_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.PARENTHESIS_BLOCK");
		this.tDO_BLOCK_PARAMETERS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.DO_BLOCK_PARAMETERS");
		this.tBELONGS_TO_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.BELONGS_TO_WORD");
		this.tHAS_MANY_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.HAS_MANY_WORD");
		this.tHAS_ONE_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.HAS_ONE_WORD");
		this.tHAS_AND_BELONGS_TO_MANY_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.HAS_AND_BELONGS_TO_MANY_WORD");
		this.tSET_TABLE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.SET_TABLE_NAME");
		this.tMODULE_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.MODULE_WORD");
		this.tCLASS_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.CLASS_WORD");
		this.tDEF_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.DEF_WORD");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.SYMBOL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.SL_COMMENT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.INT");
		this.tINT_METHOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.INT_METHOD");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.DECIMAL");
		this.tREGEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.REGEXP");
		this.tLF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.LF");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.CR");
		this.tREQUIRE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.REQUIRE");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.rails.parser.Models.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.gruposaberes.rails.parser.Models".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Class RubyClass:
	//	CLASS_WORD SPACE* name=NamespacedModuleName (SPACE* '<' SPACE* superType=NamespacedModuleName)? SPACE*
	//	classElements+=ClassElement*
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//ClassElement:
	//	-> (Method | -> Relationship | TableName) | OperationsChain;
	public ClassElementElements getClassElementAccess() {
		return pClassElement;
	}
	
	public ParserRule getClassElementRule() {
		return getClassElementAccess().getRule();
	}
	
	//TableName:
	//	SET_TABLE_NAME name=STRING;
	public TableNameElements getTableNameAccess() {
		return pTableName;
	}
	
	public ParserRule getTableNameRule() {
		return getTableNameAccess().getRule();
	}
	
	//Assignment:
	//	ID '=' (SYMBOL | STRING | ARRAY_BLOCK | PARENTHESIS_BLOCK | BRACKET_BLOCK | DECIMAL | INT | REGEXP | MethodChainCall);
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////Require:
	////  REQUIRE_WORD SPACE* STRING SPACE*
	////;
	//NamespacedModuleName:
	//	(ID '::')* ID;
	public NamespacedModuleNameElements getNamespacedModuleNameAccess() {
		return pNamespacedModuleName;
	}
	
	public ParserRule getNamespacedModuleNameRule() {
		return getNamespacedModuleNameAccess().getRule();
	}
	
	//MethodChainCall:
	//	(SYMBOL | STRING | INT | INT_METHOD | PARENTHESIS_BLOCK | ARRAY_BLOCK | NamespacedModuleName) ('.' ID
	//	PARENTHESIS_BLOCK?)* SPACE* MethodCallParameters? => SPACE*
	//	BRACKET_BLOCK? => SPACE* DO_BLOCK_PARAMETERS? => SPACE* => LF?;
	public MethodChainCallElements getMethodChainCallAccess() {
		return pMethodChainCall;
	}
	
	public ParserRule getMethodChainCallRule() {
		return getMethodChainCallAccess().getRule();
	}
	
	//MethodCallParameters:
	//	PARENTHESIS_BLOCK | ExpressionsSeparatedByCommas;
	public MethodCallParametersElements getMethodCallParametersAccess() {
		return pMethodCallParameters;
	}
	
	public ParserRule getMethodCallParametersRule() {
		return getMethodCallParametersAccess().getRule();
	}
	
	//ExpressionsSeparatedByCommas:
	//	ExpressionWithOutBracket (SPACE* COMMA (SPACE* LF)? SPACE* Expression)*
	//	// => SPACE* BS
	//;
	public ExpressionsSeparatedByCommasElements getExpressionsSeparatedByCommasAccess() {
		return pExpressionsSeparatedByCommas;
	}
	
	public ParserRule getExpressionsSeparatedByCommasRule() {
		return getExpressionsSeparatedByCommasAccess().getRule();
	}
	
	//ExpressionWithOutBracket:
	//	SYMBOL | STRING | ARRAY_BLOCK | PARENTHESIS_BLOCK | DECIMAL | INT | REGEXP | MethodChainCall | IgnoredHashKeyValue;
	public ExpressionWithOutBracketElements getExpressionWithOutBracketAccess() {
		return pExpressionWithOutBracket;
	}
	
	public ParserRule getExpressionWithOutBracketRule() {
		return getExpressionWithOutBracketAccess().getRule();
	}
	
	//Expression:
	//	ExpressionWithOutBracket | BRACKET_BLOCK;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Relationship:
	//	relationType=(HAS_MANY_WORD | HAS_ONE_WORD | HAS_AND_BELONGS_TO_MANY_WORD | BELONGS_TO_WORD) SPACE* name=(SYMBOL |
	//	STRING) SPACE* options+=HashKeyValue*;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//HashKeyValue:
	//	COMMA SPACE* (LF SPACE*)? (key=ID ':' | key=(SYMBOL | STRING) SPACE* '=>') SPACE* value=(SYMBOL | STRING |
	//	BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT | INT_METHOD | MethodChainCall) SPACE*;
	public HashKeyValueElements getHashKeyValueAccess() {
		return pHashKeyValue;
	}
	
	public ParserRule getHashKeyValueRule() {
		return getHashKeyValueAccess().getRule();
	}
	
	//IgnoredHashKeyValue:
	//	SPACE* (ID ':' | (SYMBOL | STRING) SPACE* '=>') SPACE* (SYMBOL | STRING | BRACKET_BLOCK | ARRAY_BLOCK | DECIMAL | INT
	//	| INT_METHOD | MethodChainCall | REGEXP) SPACE*;
	public IgnoredHashKeyValueElements getIgnoredHashKeyValueAccess() {
		return pIgnoredHashKeyValue;
	}
	
	public ParserRule getIgnoredHashKeyValueRule() {
		return getIgnoredHashKeyValueAccess().getRule();
	}
	
	//Method RubyMethod:
	//	DEF_WORD SPACE* name=MethodName SPACE* PARENTHESIS_BLOCK? SPACE* LF?
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//MethodName:
	//	(NamespacedModuleName '.')? ID ('?' | '=')?;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//OperationsChain:
	//	MethodChainCall (OperatorRule (BRACKET_BLOCK | DECIMAL | MethodChainCall | REGEXP))*;
	public OperationsChainElements getOperationsChainAccess() {
		return pOperationsChain;
	}
	
	public ParserRule getOperationsChainRule() {
		return getOperationsChainAccess().getRule();
	}
	
	//OperatorRule:
	//	(': ' | '?' | '<=' | '<' | '+' | '-' | '*' | '/' | '%' | '**' | '=' | '~' | '|' | '||' | '&' | '&&' | '==' | '!' |
	//	'<<' | '<=>' | '>' | '..' | '...') '='?;
	public OperatorRuleElements getOperatorRuleAccess() {
		return pOperatorRule;
	}
	
	public ParserRule getOperatorRuleRule() {
		return getOperatorRuleAccess().getRule();
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal SPACE:
	//	' ' | '\t';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal fragment NOT_BRACKET_SEQ:
	//	!('{' | '}')*;
	public TerminalRule getNOT_BRACKET_SEQRule() {
		return tNOT_BRACKET_SEQ;
	}
	
	//terminal fragment FIRST_LEVEL_BRACKET_BLOCK:
	//	'{'
	//	NOT_BRACKET_SEQ
	//	'}'
	//	NOT_BRACKET_SEQ;
	public TerminalRule getFIRST_LEVEL_BRACKET_BLOCKRule() {
		return tFIRST_LEVEL_BRACKET_BLOCK;
	}
	
	//terminal fragment SECOND_LEVEL_BRACKET_BLOCK:
	//	'{' NOT_BRACKET_SEQ
	//	FIRST_LEVEL_BRACKET_BLOCK*
	//	'}' NOT_BRACKET_SEQ;
	public TerminalRule getSECOND_LEVEL_BRACKET_BLOCKRule() {
		return tSECOND_LEVEL_BRACKET_BLOCK;
	}
	
	//terminal fragment THIRD_LEVEL_BRACKET_BLOCK:
	//	'{' NOT_BRACKET_SEQ
	//	SECOND_LEVEL_BRACKET_BLOCK*
	//	'}' NOT_BRACKET_SEQ;
	public TerminalRule getTHIRD_LEVEL_BRACKET_BLOCKRule() {
		return tTHIRD_LEVEL_BRACKET_BLOCK;
	}
	
	//terminal BRACKET_BLOCK:
	//	'{'
	//	NOT_BRACKET_SEQ
	//	THIRD_LEVEL_BRACKET_BLOCK*
	//	'}';
	public TerminalRule getBRACKET_BLOCKRule() {
		return tBRACKET_BLOCK;
	}
	
	//terminal fragment NOT_ARRAY_SEQ:
	//	!('[' | ']')*;
	public TerminalRule getNOT_ARRAY_SEQRule() {
		return tNOT_ARRAY_SEQ;
	}
	
	//terminal fragment FIRST_LEVEL_ARRAY_BLOCK:
	//	'['
	//	NOT_ARRAY_SEQ
	//	']'
	//	NOT_ARRAY_SEQ;
	public TerminalRule getFIRST_LEVEL_ARRAY_BLOCKRule() {
		return tFIRST_LEVEL_ARRAY_BLOCK;
	}
	
	//terminal fragment SECOND_LEVEL_ARRAY_BLOCK:
	//	'[' NOT_ARRAY_SEQ
	//	FIRST_LEVEL_ARRAY_BLOCK*
	//	']' NOT_ARRAY_SEQ;
	public TerminalRule getSECOND_LEVEL_ARRAY_BLOCKRule() {
		return tSECOND_LEVEL_ARRAY_BLOCK;
	}
	
	//terminal fragment THIRD_LEVEL_ARRAY_BLOCK:
	//	'[' NOT_ARRAY_SEQ
	//	SECOND_LEVEL_ARRAY_BLOCK*
	//	']' NOT_ARRAY_SEQ;
	public TerminalRule getTHIRD_LEVEL_ARRAY_BLOCKRule() {
		return tTHIRD_LEVEL_ARRAY_BLOCK;
	}
	
	//terminal ARRAY_BLOCK:
	//	'['
	//	NOT_ARRAY_SEQ
	//	THIRD_LEVEL_ARRAY_BLOCK*
	//	']';
	public TerminalRule getARRAY_BLOCKRule() {
		return tARRAY_BLOCK;
	}
	
	//terminal fragment NOT_PARENTHESIS_SEQ:
	//	!('(' | ')')*;
	public TerminalRule getNOT_PARENTHESIS_SEQRule() {
		return tNOT_PARENTHESIS_SEQ;
	}
	
	//terminal fragment FIRST_LEVEL_PARENTHESIS_BLOCK:
	//	'('
	//	NOT_PARENTHESIS_SEQ
	//	')'
	//	NOT_PARENTHESIS_SEQ;
	public TerminalRule getFIRST_LEVEL_PARENTHESIS_BLOCKRule() {
		return tFIRST_LEVEL_PARENTHESIS_BLOCK;
	}
	
	//terminal fragment SECOND_LEVEL_PARENTHESIS_BLOCK:
	//	'(' NOT_PARENTHESIS_SEQ
	//	FIRST_LEVEL_PARENTHESIS_BLOCK*
	//	')' NOT_PARENTHESIS_SEQ;
	public TerminalRule getSECOND_LEVEL_PARENTHESIS_BLOCKRule() {
		return tSECOND_LEVEL_PARENTHESIS_BLOCK;
	}
	
	//terminal fragment THIRD_LEVEL_PARENTHESIS_BLOCK:
	//	'(' NOT_PARENTHESIS_SEQ
	//	SECOND_LEVEL_PARENTHESIS_BLOCK*
	//	')' NOT_PARENTHESIS_SEQ;
	public TerminalRule getTHIRD_LEVEL_PARENTHESIS_BLOCKRule() {
		return tTHIRD_LEVEL_PARENTHESIS_BLOCK;
	}
	
	//terminal PARENTHESIS_BLOCK:
	//	'('
	//	NOT_PARENTHESIS_SEQ
	//	THIRD_LEVEL_PARENTHESIS_BLOCK*
	//	')';
	public TerminalRule getPARENTHESIS_BLOCKRule() {
		return tPARENTHESIS_BLOCK;
	}
	
	//terminal DO_BLOCK_PARAMETERS:
	//	'do' SPACE* '|' ID SPACE* (COMMA SPACE* ID)* '|';
	public TerminalRule getDO_BLOCK_PARAMETERSRule() {
		return tDO_BLOCK_PARAMETERS;
	}
	
	//terminal BELONGS_TO_WORD:
	//	'belongs_to';
	public TerminalRule getBELONGS_TO_WORDRule() {
		return tBELONGS_TO_WORD;
	}
	
	//terminal HAS_MANY_WORD:
	//	'has_many';
	public TerminalRule getHAS_MANY_WORDRule() {
		return tHAS_MANY_WORD;
	}
	
	//terminal HAS_ONE_WORD:
	//	'has_one';
	public TerminalRule getHAS_ONE_WORDRule() {
		return tHAS_ONE_WORD;
	}
	
	//terminal HAS_AND_BELONGS_TO_MANY_WORD:
	//	'has_and_belongs_to_many';
	public TerminalRule getHAS_AND_BELONGS_TO_MANY_WORDRule() {
		return tHAS_AND_BELONGS_TO_MANY_WORD;
	}
	
	//terminal SET_TABLE_NAME:
	//	'set_table_name';
	public TerminalRule getSET_TABLE_NAMERule() {
		return tSET_TABLE_NAME;
	}
	
	//terminal MODULE_WORD:
	//	'module';
	public TerminalRule getMODULE_WORDRule() {
		return tMODULE_WORD;
	}
	
	//terminal CLASS_WORD:
	//	'class ';
	public TerminalRule getCLASS_WORDRule() {
		return tCLASS_WORD;
	}
	
	//terminal DEF_WORD:
	//	'def';
	public TerminalRule getDEF_WORDRule() {
		return tDEF_WORD;
	}
	
	//terminal SYMBOL:
	//	':' ID;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal ID:
	//	CLASS_WORD | ('a'..'z' | 'A'..'Z' | '_' | '$' | '@') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '!' | '@' | '?')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | '#' BRACKET_BLOCK | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'=begin'->'=end';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'#'->'\n';
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal INT_METHOD:
	//	'0'..'9'+ '.' ID;
	public TerminalRule getINT_METHODRule() {
		return tINT_METHOD;
	}
	
	//terminal DECIMAL:
	//	'0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal REGEXP:
	//	'/' ('\\/' | !('\\/' | LF))* '/' ('i' | 'o' | 'p')?;
	public TerminalRule getREGEXPRule() {
		return tREGEXP;
	}
	
	//terminal LF:
	//	'\n';
	public TerminalRule getLFRule() {
		return tLF;
	}
	
	//terminal CR:
	//	'\r';
	public TerminalRule getCRRule() {
		return tCR;
	}
	
	//terminal REQUIRE:
	//	'require' SPACE* STRING;
	public TerminalRule getREQUIRERule() {
		return tREQUIRE;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
