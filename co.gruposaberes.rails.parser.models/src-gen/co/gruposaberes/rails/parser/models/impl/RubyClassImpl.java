/**
 * generated by Xtext 2.10.0
 */
package co.gruposaberes.rails.parser.models.impl;

import co.gruposaberes.rails.parser.models.ClassElement;
import co.gruposaberes.rails.parser.models.ModelsPackage;
import co.gruposaberes.rails.parser.models.RubyClass;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ruby Class</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.gruposaberes.rails.parser.models.impl.RubyClassImpl#getName <em>Name</em>}</li>
 *   <li>{@link co.gruposaberes.rails.parser.models.impl.RubyClassImpl#getSuperType <em>Super Type</em>}</li>
 *   <li>{@link co.gruposaberes.rails.parser.models.impl.RubyClassImpl#getClassElements <em>Class Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RubyClassImpl extends MinimalEObjectImpl.Container implements RubyClass
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getSuperType() <em>Super Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperType()
   * @generated
   * @ordered
   */
  protected static final String SUPER_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSuperType() <em>Super Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperType()
   * @generated
   * @ordered
   */
  protected String superType = SUPER_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getClassElements() <em>Class Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassElements()
   * @generated
   * @ordered
   */
  protected EList<ClassElement> classElements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RubyClassImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelsPackage.Literals.RUBY_CLASS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelsPackage.RUBY_CLASS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSuperType()
  {
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSuperType(String newSuperType)
  {
    String oldSuperType = superType;
    superType = newSuperType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelsPackage.RUBY_CLASS__SUPER_TYPE, oldSuperType, superType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ClassElement> getClassElements()
  {
    if (classElements == null)
    {
      classElements = new EObjectContainmentEList<ClassElement>(ClassElement.class, this, ModelsPackage.RUBY_CLASS__CLASS_ELEMENTS);
    }
    return classElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelsPackage.RUBY_CLASS__CLASS_ELEMENTS:
        return ((InternalEList<?>)getClassElements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelsPackage.RUBY_CLASS__NAME:
        return getName();
      case ModelsPackage.RUBY_CLASS__SUPER_TYPE:
        return getSuperType();
      case ModelsPackage.RUBY_CLASS__CLASS_ELEMENTS:
        return getClassElements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelsPackage.RUBY_CLASS__NAME:
        setName((String)newValue);
        return;
      case ModelsPackage.RUBY_CLASS__SUPER_TYPE:
        setSuperType((String)newValue);
        return;
      case ModelsPackage.RUBY_CLASS__CLASS_ELEMENTS:
        getClassElements().clear();
        getClassElements().addAll((Collection<? extends ClassElement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelsPackage.RUBY_CLASS__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ModelsPackage.RUBY_CLASS__SUPER_TYPE:
        setSuperType(SUPER_TYPE_EDEFAULT);
        return;
      case ModelsPackage.RUBY_CLASS__CLASS_ELEMENTS:
        getClassElements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelsPackage.RUBY_CLASS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ModelsPackage.RUBY_CLASS__SUPER_TYPE:
        return SUPER_TYPE_EDEFAULT == null ? superType != null : !SUPER_TYPE_EDEFAULT.equals(superType);
      case ModelsPackage.RUBY_CLASS__CLASS_ELEMENTS:
        return classElements != null && !classElements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", superType: ");
    result.append(superType);
    result.append(')');
    return result.toString();
  }

} //RubyClassImpl
