/*
 * generated by Xtext 2.10.0
 */
grammar InternalRailsSchema;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package co.gruposaberes.model.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package co.gruposaberes.model.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import co.gruposaberes.model.services.RailsSchemaGrammarAccess;

}
@parser::members {
	private RailsSchemaGrammarAccess grammarAccess;

	public void setGrammarAccess(RailsSchemaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSchema
entryRuleSchema
:
{ before(grammarAccess.getSchemaRule()); }
	 ruleSchema
{ after(grammarAccess.getSchemaRule()); } 
	 EOF 
;

// Rule Schema
ruleSchema 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSchemaAccess().getGroup()); }
		(rule__Schema__Group__0)
		{ after(grammarAccess.getSchemaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSchemaMember
entryRuleSchemaMember
:
{ before(grammarAccess.getSchemaMemberRule()); }
	 ruleSchemaMember
{ after(grammarAccess.getSchemaMemberRule()); } 
	 EOF 
;

// Rule SchemaMember
ruleSchemaMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSchemaMemberAccess().getAlternatives()); }
		(rule__SchemaMember__Alternatives)
		{ after(grammarAccess.getSchemaMemberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTableAttributes
entryRuleTableAttributes
:
{ before(grammarAccess.getTableAttributesRule()); }
	 ruleTableAttributes
{ after(grammarAccess.getTableAttributesRule()); } 
	 EOF 
;

// Rule TableAttributes
ruleTableAttributes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAttributesAccess().getGroup()); }
		(rule__TableAttributes__Group__0)
		{ after(grammarAccess.getTableAttributesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIgnoredHashKeyValue
entryRuleIgnoredHashKeyValue
:
{ before(grammarAccess.getIgnoredHashKeyValueRule()); }
	 ruleIgnoredHashKeyValue
{ after(grammarAccess.getIgnoredHashKeyValueRule()); } 
	 EOF 
;

// Rule IgnoredHashKeyValue
ruleIgnoredHashKeyValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getGroup()); }
		(rule__IgnoredHashKeyValue__Group__0)
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndex
entryRuleIndex
:
{ before(grammarAccess.getIndexRule()); }
	 ruleIndex
{ after(grammarAccess.getIndexRule()); } 
	 EOF 
;

// Rule Index
ruleIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexAccess().getGroup()); }
		(rule__Index__Group__0)
		{ after(grammarAccess.getIndexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaMember__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSchemaMemberAccess().getTableParserRuleCall_0()); }
		ruleTable
		{ after(grammarAccess.getSchemaMemberAccess().getTableParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaMemberAccess().getIndexParserRuleCall_1()); }
		ruleIndex
		{ after(grammarAccess.getSchemaMemberAccess().getIndexParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_0()); }
		(rule__IgnoredHashKeyValue__Group_1_0__0)
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_1()); }
		(rule__IgnoredHashKeyValue__Group_1_1__0)
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Alternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSYMBOLTerminalRuleCall_1_1_0_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSYMBOLTerminalRuleCall_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSTRINGTerminalRuleCall_1_1_0_1()); }
		RULE_STRING
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSTRINGTerminalRuleCall_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSYMBOLTerminalRuleCall_3_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSYMBOLTerminalRuleCall_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSTRINGTerminalRuleCall_3_1()); }
		RULE_STRING
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSTRINGTerminalRuleCall_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getARRAY_BLOCKTerminalRuleCall_3_2()); }
		RULE_ARRAY_BLOCK
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getARRAY_BLOCKTerminalRuleCall_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getINTTerminalRuleCall_3_3()); }
		RULE_INT
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getINTTerminalRuleCall_3_3()); }
	)
	|
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getIDTerminalRuleCall_3_4()); }
		RULE_ID
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getIDTerminalRuleCall_3_4()); }
	)
	|
	(
		{ before(grammarAccess.getIgnoredHashKeyValueAccess().getDECIMALTerminalRuleCall_3_5()); }
		RULE_DECIMAL
		{ after(grammarAccess.getIgnoredHashKeyValueAccess().getDECIMALTerminalRuleCall_3_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexAccess().getIgnoredHashKeyValueParserRuleCall_2_1_0()); }
		ruleIgnoredHashKeyValue
		{ after(grammarAccess.getIndexAccess().getIgnoredHashKeyValueParserRuleCall_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIndexAccess().getARRAY_BLOCKTerminalRuleCall_2_1_1()); }
		RULE_ARRAY_BLOCK
		{ after(grammarAccess.getIndexAccess().getARRAY_BLOCKTerminalRuleCall_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schema__Group__0__Impl
	rule__Schema__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaAccess().getActiveRecordSchemaDefineKeyword_0()); }
	'ActiveRecord::Schema.define'
	{ after(grammarAccess.getSchemaAccess().getActiveRecordSchemaDefineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schema__Group__1__Impl
	rule__Schema__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaAccess().getPARENTHESIS_BLOCKTerminalRuleCall_1()); }
	RULE_PARENTHESIS_BLOCK
	{ after(grammarAccess.getSchemaAccess().getPARENTHESIS_BLOCKTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schema__Group__2__Impl
	rule__Schema__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaAccess().getDO_WORDTerminalRuleCall_2()); }
	RULE_DO_WORD
	{ after(grammarAccess.getSchemaAccess().getDO_WORDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schema__Group__3__Impl
	rule__Schema__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaAccess().getSchema_membersAssignment_3()); }
	(rule__Schema__Schema_membersAssignment_3)*
	{ after(grammarAccess.getSchemaAccess().getSchema_membersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schema__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaAccess().getEND_WORDTerminalRuleCall_4()); }
	RULE_END_WORD
	{ after(grammarAccess.getSchemaAccess().getEND_WORDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCreate_tableKeyword_0()); }
	'create_table'
	{ after(grammarAccess.getTableAccess().getCreate_tableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getNameAssignment_1()); }
	(rule__Table__NameAssignment_1)
	{ after(grammarAccess.getTableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getGroup_2()); }
	(rule__Table__Group_2__0)*
	{ after(grammarAccess.getTableAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getDO_WORDTerminalRuleCall_3()); }
	RULE_DO_WORD
	{ after(grammarAccess.getTableAccess().getDO_WORDTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__4__Impl
	rule__Table__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getBLOCK_PARAMSTerminalRuleCall_4()); }
	RULE_BLOCK_PARAMS
	{ after(grammarAccess.getTableAccess().getBLOCK_PARAMSTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__5__Impl
	rule__Table__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getAttributesAssignment_5()); }
	(rule__Table__AttributesAssignment_5)*
	{ after(grammarAccess.getTableAccess().getAttributesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getEND_WORDTerminalRuleCall_6()); }
	(RULE_END_WORD)
	{ after(grammarAccess.getTableAccess().getEND_WORDTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_2__0__Impl
	rule__Table__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
	{ after(grammarAccess.getTableAccess().getCOMMATerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getIgnoredHashKeyValueParserRuleCall_2_1()); }
	ruleIgnoredHashKeyValue
	{ after(grammarAccess.getTableAccess().getIgnoredHashKeyValueParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TableAttributes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAttributes__Group__0__Impl
	rule__TableAttributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAttributesAccess().getTKeyword_0()); }
	't.'
	{ after(grammarAccess.getTableAttributesAccess().getTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAttributes__Group__1__Impl
	rule__TableAttributes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAttributesAccess().getDatatypeAssignment_1()); }
	(rule__TableAttributes__DatatypeAssignment_1)
	{ after(grammarAccess.getTableAttributesAccess().getDatatypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAttributes__Group__2__Impl
	rule__TableAttributes__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAttributesAccess().getNameAssignment_2()); }
	(rule__TableAttributes__NameAssignment_2)
	{ after(grammarAccess.getTableAttributesAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAttributes__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAttributesAccess().getGroup_3()); }
	(rule__TableAttributes__Group_3__0)*
	{ after(grammarAccess.getTableAttributesAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TableAttributes__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAttributes__Group_3__0__Impl
	rule__TableAttributes__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAttributesAccess().getCOMMATerminalRuleCall_3_0()); }
	RULE_COMMA
	{ after(grammarAccess.getTableAttributesAccess().getCOMMATerminalRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAttributes__Group_3__1__Impl
	rule__TableAttributes__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAttributesAccess().getSPACETerminalRuleCall_3_1()); }
	(RULE_SPACE)*
	{ after(grammarAccess.getTableAttributesAccess().getSPACETerminalRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAttributes__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAttributesAccess().getIgnoredHashKeyValueParserRuleCall_3_2()); }
	ruleIgnoredHashKeyValue
	{ after(grammarAccess.getTableAttributesAccess().getIgnoredHashKeyValueParserRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IgnoredHashKeyValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group__0__Impl
	rule__IgnoredHashKeyValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_0()); }
	(RULE_SPACE)*
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group__1__Impl
	rule__IgnoredHashKeyValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1()); }
	(rule__IgnoredHashKeyValue__Alternatives_1)
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group__2__Impl
	rule__IgnoredHashKeyValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_2()); }
	(RULE_SPACE)*
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group__3__Impl
	rule__IgnoredHashKeyValue__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_3()); }
	(rule__IgnoredHashKeyValue__Alternatives_3)
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_4()); }
	(RULE_SPACE)*
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IgnoredHashKeyValue__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group_1_0__0__Impl
	rule__IgnoredHashKeyValue__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getIDTerminalRuleCall_1_0_0()); }
	RULE_ID
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getIDTerminalRuleCall_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getColonKeyword_1_0_1()); }
	':'
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getColonKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IgnoredHashKeyValue__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group_1_1__0__Impl
	rule__IgnoredHashKeyValue__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1_1_0()); }
	(rule__IgnoredHashKeyValue__Alternatives_1_1_0)
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group_1_1__1__Impl
	rule__IgnoredHashKeyValue__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_1_1_1()); }
	(RULE_SPACE)*
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IgnoredHashKeyValue__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoredHashKeyValue__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIgnoredHashKeyValueAccess().getEqualsSignGreaterThanSignKeyword_1_1_2()); }
	'=>'
	{ after(grammarAccess.getIgnoredHashKeyValueAccess().getEqualsSignGreaterThanSignKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Index__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__0__Impl
	rule__Index__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getIndexAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__1__Impl
	rule__Index__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
	{ after(grammarAccess.getIndexAccess().getSTRINGTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getGroup_2()); }
	(rule__Index__Group_2__0)*
	{ after(grammarAccess.getIndexAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Index__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group_2__0__Impl
	rule__Index__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
	{ after(grammarAccess.getIndexAccess().getCOMMATerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getAlternatives_2_1()); }
	(rule__Index__Alternatives_2_1)
	{ after(grammarAccess.getIndexAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Schema_membersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSchemaAccess().getSchema_membersSchemaMemberParserRuleCall_3_0()); }
		ruleSchemaMember
		{ after(grammarAccess.getSchemaAccess().getSchema_membersSchemaMemberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTableAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__AttributesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getAttributesTableAttributesParserRuleCall_5_0()); }
		ruleTableAttributes
		{ after(grammarAccess.getTableAccess().getAttributesTableAttributesParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__DatatypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAttributesAccess().getDatatypeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAttributesAccess().getDatatypeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAttributes__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAttributesAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTableAttributesAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_COMMA : ',';

RULE_SPACE : (' '|'\f');

RULE_BRACKET_BLOCK_ALONE : '{' ~(('{'|'}'))* '}';

RULE_ARRAY_BLOCK : '[' ~(']')* ']';

RULE_PARENTHESIS_BLOCK : '(' ~(')')* ')';

RULE_DO_WORD : 'do';

RULE_END_WORD : 'end';

RULE_BLOCK_PARAMS : '|' RULE_ID '|';

RULE_SYMBOL : ':' RULE_ID;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '=begin' ( options {greedy=false;} : . )*'=end';

RULE_SL_COMMENT : '#' ( options {greedy=false;} : . )*'\n';

RULE_INT : ('0'..'9')+;

RULE_DECIMAL : RULE_INT '.' RULE_INT;

RULE_BS : ('\t'|'\n');

RULE_ANY_OTHER : .;
