/*
 * generated by Xtext 2.10.0
 */
package co.gruposaberes.model.ide.contentassist.antlr;

import co.gruposaberes.model.ide.contentassist.antlr.internal.InternalRailsSchemaParser;
import co.gruposaberes.model.services.RailsSchemaGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class RailsSchemaParser extends AbstractContentAssistParser {

	@Inject
	private RailsSchemaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRailsSchemaParser createParser() {
		InternalRailsSchemaParser result = new InternalRailsSchemaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSchemaMemberAccess().getAlternatives(), "rule__SchemaMember__Alternatives");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1(), "rule__IgnoredHashKeyValue__Alternatives_1");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1_1_0(), "rule__IgnoredHashKeyValue__Alternatives_1_1_0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_3(), "rule__IgnoredHashKeyValue__Alternatives_3");
					put(grammarAccess.getIndexAccess().getAlternatives_2_1(), "rule__Index__Alternatives_2_1");
					put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getTableAccess().getGroup_2(), "rule__Table__Group_2__0");
					put(grammarAccess.getTableAttributesAccess().getGroup(), "rule__TableAttributes__Group__0");
					put(grammarAccess.getTableAttributesAccess().getGroup_3(), "rule__TableAttributes__Group_3__0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getGroup(), "rule__IgnoredHashKeyValue__Group__0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_0(), "rule__IgnoredHashKeyValue__Group_1_0__0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_1(), "rule__IgnoredHashKeyValue__Group_1_1__0");
					put(grammarAccess.getIndexAccess().getGroup(), "rule__Index__Group__0");
					put(grammarAccess.getIndexAccess().getGroup_2(), "rule__Index__Group_2__0");
					put(grammarAccess.getSchemaAccess().getSchema_membersAssignment_3(), "rule__Schema__Schema_membersAssignment_3");
					put(grammarAccess.getTableAccess().getNameAssignment_1(), "rule__Table__NameAssignment_1");
					put(grammarAccess.getTableAccess().getAttributesAssignment_5(), "rule__Table__AttributesAssignment_5");
					put(grammarAccess.getTableAttributesAccess().getDatatypeAssignment_1(), "rule__TableAttributes__DatatypeAssignment_1");
					put(grammarAccess.getTableAttributesAccess().getNameAssignment_2(), "rule__TableAttributes__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRailsSchemaParser typedParser = (InternalRailsSchemaParser) parser;
			typedParser.entryRuleSchema();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_BS", "RULE_SPACE", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RailsSchemaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RailsSchemaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
