/*
 * generated by Xtext
 */
package co.gruposaberes.model.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import co.gruposaberes.model.services.RailsGrammarAccess;

public class RailsParser extends AbstractContentAssistParser {
	
	@Inject
	private RailsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected co.gruposaberes.model.ui.contentassist.antlr.internal.InternalRailsParser createParser() {
		co.gruposaberes.model.ui.contentassist.antlr.internal.InternalRailsParser result = new co.gruposaberes.model.ui.contentassist.antlr.internal.InternalRailsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClassElementAccess().getAlternatives(), "rule__ClassElement__Alternatives");
					put(grammarAccess.getClassElementAccess().getAlternatives_0_0(), "rule__ClassElement__Alternatives_0_0");
					put(grammarAccess.getAssignmentAccess().getAlternatives_2(), "rule__Assignment__Alternatives_2");
					put(grammarAccess.getMethodChainCallAccess().getAlternatives_0(), "rule__MethodChainCall__Alternatives_0");
					put(grammarAccess.getMethodCallParametersAccess().getAlternatives(), "rule__MethodCallParameters__Alternatives");
					put(grammarAccess.getExpressionWithOutBracketAccess().getAlternatives(), "rule__ExpressionWithOutBracket__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getRelationshipAccess().getRelationTypeAlternatives_0_0(), "rule__Relationship__RelationTypeAlternatives_0_0");
					put(grammarAccess.getRelationshipAccess().getNameAlternatives_2_0(), "rule__Relationship__NameAlternatives_2_0");
					put(grammarAccess.getHashKeyValueAccess().getAlternatives_3(), "rule__HashKeyValue__Alternatives_3");
					put(grammarAccess.getHashKeyValueAccess().getKeyAlternatives_3_1_0_0(), "rule__HashKeyValue__KeyAlternatives_3_1_0_0");
					put(grammarAccess.getHashKeyValueAccess().getValueAlternatives_5_0(), "rule__HashKeyValue__ValueAlternatives_5_0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1(), "rule__IgnoredHashKeyValue__Alternatives_1");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_1_1_0(), "rule__IgnoredHashKeyValue__Alternatives_1_1_0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getAlternatives_3(), "rule__IgnoredHashKeyValue__Alternatives_3");
					put(grammarAccess.getMethodNameAccess().getAlternatives_2(), "rule__MethodName__Alternatives_2");
					put(grammarAccess.getOperationsChainAccess().getOperantsAlternatives_1_1_0(), "rule__OperationsChain__OperantsAlternatives_1_1_0");
					put(grammarAccess.getOperatorRuleAccess().getAlternatives_0(), "rule__OperatorRule__Alternatives_0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
					put(grammarAccess.getClassElementAccess().getGroup_0(), "rule__ClassElement__Group_0__0");
					put(grammarAccess.getTableNameAccess().getGroup(), "rule__TableName__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getNamespacedModuleNameAccess().getGroup(), "rule__NamespacedModuleName__Group__0");
					put(grammarAccess.getNamespacedModuleNameAccess().getGroup_0(), "rule__NamespacedModuleName__Group_0__0");
					put(grammarAccess.getMethodChainCallAccess().getGroup(), "rule__MethodChainCall__Group__0");
					put(grammarAccess.getMethodChainCallAccess().getGroup_1(), "rule__MethodChainCall__Group_1__0");
					put(grammarAccess.getExpressionsSeparatedByCommasAccess().getGroup(), "rule__ExpressionsSeparatedByCommas__Group__0");
					put(grammarAccess.getExpressionsSeparatedByCommasAccess().getGroup_1(), "rule__ExpressionsSeparatedByCommas__Group_1__0");
					put(grammarAccess.getExpressionsSeparatedByCommasAccess().getGroup_1_2(), "rule__ExpressionsSeparatedByCommas__Group_1_2__0");
					put(grammarAccess.getRelationshipAccess().getGroup(), "rule__Relationship__Group__0");
					put(grammarAccess.getHashKeyValueAccess().getGroup(), "rule__HashKeyValue__Group__0");
					put(grammarAccess.getHashKeyValueAccess().getGroup_2(), "rule__HashKeyValue__Group_2__0");
					put(grammarAccess.getHashKeyValueAccess().getGroup_3_0(), "rule__HashKeyValue__Group_3_0__0");
					put(grammarAccess.getHashKeyValueAccess().getGroup_3_1(), "rule__HashKeyValue__Group_3_1__0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getGroup(), "rule__IgnoredHashKeyValue__Group__0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_0(), "rule__IgnoredHashKeyValue__Group_1_0__0");
					put(grammarAccess.getIgnoredHashKeyValueAccess().getGroup_1_1(), "rule__IgnoredHashKeyValue__Group_1_1__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodNameAccess().getGroup(), "rule__MethodName__Group__0");
					put(grammarAccess.getMethodNameAccess().getGroup_0(), "rule__MethodName__Group_0__0");
					put(grammarAccess.getOperationsChainAccess().getGroup(), "rule__OperationsChain__Group__0");
					put(grammarAccess.getOperationsChainAccess().getGroup_1(), "rule__OperationsChain__Group_1__0");
					put(grammarAccess.getOperatorRuleAccess().getGroup(), "rule__OperatorRule__Group__0");
					put(grammarAccess.getClassAccess().getNameAssignment_2(), "rule__Class__NameAssignment_2");
					put(grammarAccess.getClassAccess().getSuperTypeAssignment_3_3(), "rule__Class__SuperTypeAssignment_3_3");
					put(grammarAccess.getClassAccess().getClassElementsAssignment_5(), "rule__Class__ClassElementsAssignment_5");
					put(grammarAccess.getTableNameAccess().getNameAssignment_1(), "rule__TableName__NameAssignment_1");
					put(grammarAccess.getRelationshipAccess().getRelationTypeAssignment_0(), "rule__Relationship__RelationTypeAssignment_0");
					put(grammarAccess.getRelationshipAccess().getNameAssignment_2(), "rule__Relationship__NameAssignment_2");
					put(grammarAccess.getRelationshipAccess().getOptionsAssignment_4(), "rule__Relationship__OptionsAssignment_4");
					put(grammarAccess.getHashKeyValueAccess().getKeyAssignment_3_0_0(), "rule__HashKeyValue__KeyAssignment_3_0_0");
					put(grammarAccess.getHashKeyValueAccess().getKeyAssignment_3_1_0(), "rule__HashKeyValue__KeyAssignment_3_1_0");
					put(grammarAccess.getHashKeyValueAccess().getValueAssignment_5(), "rule__HashKeyValue__ValueAssignment_5");
					put(grammarAccess.getMethodAccess().getNameAssignment_2(), "rule__Method__NameAssignment_2");
					put(grammarAccess.getOperationsChainAccess().getNameAssignment_0(), "rule__OperationsChain__NameAssignment_0");
					put(grammarAccess.getOperationsChainAccess().getOperatorsAssignment_1_0(), "rule__OperationsChain__OperatorsAssignment_1_0");
					put(grammarAccess.getOperationsChainAccess().getOperantsAssignment_1_1(), "rule__OperationsChain__OperantsAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			co.gruposaberes.model.ui.contentassist.antlr.internal.InternalRailsParser typedParser = (co.gruposaberes.model.ui.contentassist.antlr.internal.InternalRailsParser) parser;
			typedParser.entryRuleClass();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_LF", "RULE_CR", "RULE_SPACE", "RULE_SL_COMMENT", "RULE_ML_COMMENT", "RULE_REQUIRE" };
	}
	
	public RailsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RailsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
