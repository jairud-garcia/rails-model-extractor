/*
* generated by Xtext
*/
grammar InternalRails;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package co.gruposaberes.model.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package co.gruposaberes.model.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import co.gruposaberes.model.services.RailsGrammarAccess;

}

@parser::members {
 
 	private RailsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RailsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleClass
entryRuleClass 
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassAccess().getGroup()); }
(rule__Class__Group__0)
{ after(grammarAccess.getClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespacedModuleName
entryRuleNamespacedModuleName 
:
{ before(grammarAccess.getNamespacedModuleNameRule()); }
	 ruleNamespacedModuleName
{ after(grammarAccess.getNamespacedModuleNameRule()); } 
	 EOF 
;

// Rule NamespacedModuleName
ruleNamespacedModuleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespacedModuleNameAccess().getGroup()); }
(rule__NamespacedModuleName__Group__0)
{ after(grammarAccess.getNamespacedModuleNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassElement
entryRuleClassElement 
:
{ before(grammarAccess.getClassElementRule()); }
	 ruleClassElement
{ after(grammarAccess.getClassElementRule()); } 
	 EOF 
;

// Rule ClassElement
ruleClassElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassElementAccess().getAlternatives()); }
(rule__ClassElement__Alternatives)
{ after(grammarAccess.getClassElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationship
entryRuleRelationship 
:
{ before(grammarAccess.getRelationshipRule()); }
	 ruleRelationship
{ after(grammarAccess.getRelationshipRule()); } 
	 EOF 
;

// Rule Relationship
ruleRelationship
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationshipAccess().getAlternatives()); }
(rule__Relationship__Alternatives)
{ after(grammarAccess.getRelationshipAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHasMany
entryRuleHasMany 
:
{ before(grammarAccess.getHasManyRule()); }
	 ruleHasMany
{ after(grammarAccess.getHasManyRule()); } 
	 EOF 
;

// Rule HasMany
ruleHasMany
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHasManyAccess().getGroup()); }
(rule__HasMany__Group__0)
{ after(grammarAccess.getHasManyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHasAndBelongsToMany
entryRuleHasAndBelongsToMany 
:
{ before(grammarAccess.getHasAndBelongsToManyRule()); }
	 ruleHasAndBelongsToMany
{ after(grammarAccess.getHasAndBelongsToManyRule()); } 
	 EOF 
;

// Rule HasAndBelongsToMany
ruleHasAndBelongsToMany
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHasAndBelongsToManyAccess().getGroup()); }
(rule__HasAndBelongsToMany__Group__0)
{ after(grammarAccess.getHasAndBelongsToManyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleHashKeyValue
entryRuleHashKeyValue 
:
{ before(grammarAccess.getHashKeyValueRule()); }
	 ruleHashKeyValue
{ after(grammarAccess.getHashKeyValueRule()); } 
	 EOF 
;

// Rule HashKeyValue
ruleHashKeyValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHashKeyValueAccess().getGroup()); }
(rule__HashKeyValue__Group__0)
{ after(grammarAccess.getHashKeyValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBelongsTo
entryRuleBelongsTo 
:
{ before(grammarAccess.getBelongsToRule()); }
	 ruleBelongsTo
{ after(grammarAccess.getBelongsToRule()); } 
	 EOF 
;

// Rule BelongsTo
ruleBelongsTo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBelongsToAccess().getGroup()); }
(rule__BelongsTo__Group__0)
{ after(grammarAccess.getBelongsToAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethod
entryRuleMethod 
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodAccess().getGroup()); }
(rule__Method__Group__0)
{ after(grammarAccess.getMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodName
entryRuleMethodName 
:
{ before(grammarAccess.getMethodNameRule()); }
	 ruleMethodName
{ after(grammarAccess.getMethodNameRule()); } 
	 EOF 
;

// Rule MethodName
ruleMethodName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodNameAccess().getGroup()); }
(rule__MethodName__Group__0)
{ after(grammarAccess.getMethodNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ClassElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassElementAccess().getMethodParserRuleCall_0()); }
	ruleMethod
{ after(grammarAccess.getClassElementAccess().getMethodParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClassElementAccess().getRelationshipParserRuleCall_1()); }
	ruleRelationship
{ after(grammarAccess.getClassElementAccess().getRelationshipParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHasManyParserRuleCall_0()); }
	ruleHasMany
{ after(grammarAccess.getRelationshipAccess().getHasManyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRelationshipAccess().getHasAndBelongsToManyParserRuleCall_1()); }
	ruleHasAndBelongsToMany
{ after(grammarAccess.getRelationshipAccess().getHasAndBelongsToManyParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getRelationshipAccess().getBelongsToParserRuleCall_2()); }
	ruleBelongsTo
{ after(grammarAccess.getRelationshipAccess().getBelongsToParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__HashKeyValue__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getGroup_2_0()); }
(rule__HashKeyValue__Group_2_0__0)
{ after(grammarAccess.getHashKeyValueAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getHashKeyValueAccess().getGroup_2_1()); }
(rule__HashKeyValue__Group_2_1__0)
{ after(grammarAccess.getHashKeyValueAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__KeyAlternatives_2_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getKeySYMBOLTerminalRuleCall_2_1_0_0_0()); }
	RULE_SYMBOL
{ after(grammarAccess.getHashKeyValueAccess().getKeySYMBOLTerminalRuleCall_2_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getHashKeyValueAccess().getKeySTRINGTerminalRuleCall_2_1_0_0_1()); }
	RULE_STRING
{ after(grammarAccess.getHashKeyValueAccess().getKeySTRINGTerminalRuleCall_2_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__ValueAlternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getValueSYMBOLTerminalRuleCall_4_0_0()); }
	RULE_SYMBOL
{ after(grammarAccess.getHashKeyValueAccess().getValueSYMBOLTerminalRuleCall_4_0_0()); }
)

    |(
{ before(grammarAccess.getHashKeyValueAccess().getValueSTRINGTerminalRuleCall_4_0_1()); }
	RULE_STRING
{ after(grammarAccess.getHashKeyValueAccess().getValueSTRINGTerminalRuleCall_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__NameAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getNameSYMBOLTerminalRuleCall_2_0_0()); }
	RULE_SYMBOL
{ after(grammarAccess.getBelongsToAccess().getNameSYMBOLTerminalRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getBelongsToAccess().getNameSTRINGTerminalRuleCall_2_0_1()); }
	RULE_STRING
{ after(grammarAccess.getBelongsToAccess().getNameSTRINGTerminalRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getQuestionMarkKeyword_1_0()); }

	'?' 

{ after(grammarAccess.getMethodNameAccess().getQuestionMarkKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getMethodNameAccess().getEqualsSignKeyword_1_1()); }

	'=' 

{ after(grammarAccess.getMethodNameAccess().getEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Class__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getCLASS_WORDTerminalRuleCall_0()); }
	RULE_CLASS_WORD
{ after(grammarAccess.getClassAccess().getCLASS_WORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSpaceKeyword_1()); }
(
	' ' 
)*
{ after(grammarAccess.getClassAccess().getSpaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameAssignment_2()); }
(rule__Class__NameAssignment_2)
{ after(grammarAccess.getClassAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getGroup_3()); }
(rule__Class__Group_3__0)?
{ after(grammarAccess.getClassAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__4__Impl
	rule__Class__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSpaceKeyword_4()); }
(
	' ' 
)*
{ after(grammarAccess.getClassAccess().getSpaceKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__5__Impl
	rule__Class__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getClassElementsAssignment_5()); }
(rule__Class__ClassElementsAssignment_5)*
{ after(grammarAccess.getClassAccess().getClassElementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getEND_WORDTerminalRuleCall_6()); }
	RULE_END_WORD
{ after(grammarAccess.getClassAccess().getEND_WORDTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Class__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_3__0__Impl
	rule__Class__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSpaceKeyword_3_0()); }
(
	' ' 
)*
{ after(grammarAccess.getClassAccess().getSpaceKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_3__1__Impl
	rule__Class__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getLessThanSignKeyword_3_1()); }

	'<' 

{ after(grammarAccess.getClassAccess().getLessThanSignKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_3__2__Impl
	rule__Class__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSpaceKeyword_3_2()); }
(
	' ' 
)*
{ after(grammarAccess.getClassAccess().getSpaceKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSuperTypeAssignment_3_3()); }
(rule__Class__SuperTypeAssignment_3_3)
{ after(grammarAccess.getClassAccess().getSuperTypeAssignment_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NamespacedModuleName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespacedModuleName__Group__0__Impl
	rule__NamespacedModuleName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespacedModuleName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespacedModuleNameAccess().getGroup_0()); }
(rule__NamespacedModuleName__Group_0__0)*
{ after(grammarAccess.getNamespacedModuleNameAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespacedModuleName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespacedModuleName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespacedModuleName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespacedModuleNameAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getNamespacedModuleNameAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamespacedModuleName__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespacedModuleName__Group_0__0__Impl
	rule__NamespacedModuleName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespacedModuleName__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespacedModuleNameAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getNamespacedModuleNameAccess().getIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespacedModuleName__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespacedModuleName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespacedModuleName__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespacedModuleNameAccess().getColonColonKeyword_0_1()); }

	'::' 

{ after(grammarAccess.getNamespacedModuleNameAccess().getColonColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HasMany__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasMany__Group__0__Impl
	rule__HasMany__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HasMany__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasManyAccess().getHAS_MANY_WORDTerminalRuleCall_0()); }
	RULE_HAS_MANY_WORD
{ after(grammarAccess.getHasManyAccess().getHAS_MANY_WORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasMany__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasMany__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HasMany__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasManyAccess().getNameAssignment_1()); }
(rule__HasMany__NameAssignment_1)
{ after(grammarAccess.getHasManyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HasAndBelongsToMany__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasAndBelongsToMany__Group__0__Impl
	rule__HasAndBelongsToMany__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HasAndBelongsToMany__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasAndBelongsToManyAccess().getHAS_AND_BELONGS_TO_MANY_WORDTerminalRuleCall_0()); }
	RULE_HAS_AND_BELONGS_TO_MANY_WORD
{ after(grammarAccess.getHasAndBelongsToManyAccess().getHAS_AND_BELONGS_TO_MANY_WORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasAndBelongsToMany__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasAndBelongsToMany__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HasAndBelongsToMany__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasAndBelongsToManyAccess().getNameAssignment_1()); }
(rule__HasAndBelongsToMany__NameAssignment_1)
{ after(grammarAccess.getHasAndBelongsToManyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__HashKeyValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group__0__Impl
	rule__HashKeyValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getCommaKeyword_0()); }

	',' 

{ after(grammarAccess.getHashKeyValueAccess().getCommaKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashKeyValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group__1__Impl
	rule__HashKeyValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getSpaceKeyword_1()); }
(
	' ' 
)*
{ after(grammarAccess.getHashKeyValueAccess().getSpaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashKeyValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group__2__Impl
	rule__HashKeyValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getAlternatives_2()); }
(rule__HashKeyValue__Alternatives_2)
{ after(grammarAccess.getHashKeyValueAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashKeyValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group__3__Impl
	rule__HashKeyValue__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getSpaceKeyword_3()); }
(
	' ' 
)*
{ after(grammarAccess.getHashKeyValueAccess().getSpaceKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashKeyValue__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getValueAssignment_4()); }
(rule__HashKeyValue__ValueAssignment_4)
{ after(grammarAccess.getHashKeyValueAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__HashKeyValue__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group_2_0__0__Impl
	rule__HashKeyValue__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getKeyAssignment_2_0_0()); }
(rule__HashKeyValue__KeyAssignment_2_0_0)
{ after(grammarAccess.getHashKeyValueAccess().getKeyAssignment_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashKeyValue__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getColonKeyword_2_0_1()); }

	':' 

{ after(grammarAccess.getHashKeyValueAccess().getColonKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HashKeyValue__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group_2_1__0__Impl
	rule__HashKeyValue__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getKeyAssignment_2_1_0()); }
(rule__HashKeyValue__KeyAssignment_2_1_0)
{ after(grammarAccess.getHashKeyValueAccess().getKeyAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashKeyValue__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group_2_1__1__Impl
	rule__HashKeyValue__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getSpaceKeyword_2_1_1()); }
(
	' ' 
)*
{ after(grammarAccess.getHashKeyValueAccess().getSpaceKeyword_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashKeyValue__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashKeyValue__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getEqualsSignGreaterThanSignKeyword_2_1_2()); }

	'=>' 

{ after(grammarAccess.getHashKeyValueAccess().getEqualsSignGreaterThanSignKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BelongsTo__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BelongsTo__Group__0__Impl
	rule__BelongsTo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getBELONGS_TO_WORDTerminalRuleCall_0()); }
	RULE_BELONGS_TO_WORD
{ after(grammarAccess.getBelongsToAccess().getBELONGS_TO_WORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BelongsTo__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BelongsTo__Group__1__Impl
	rule__BelongsTo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getSpaceKeyword_1()); }
(
	' ' 
)*
{ after(grammarAccess.getBelongsToAccess().getSpaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BelongsTo__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BelongsTo__Group__2__Impl
	rule__BelongsTo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getNameAssignment_2()); }
(rule__BelongsTo__NameAssignment_2)
{ after(grammarAccess.getBelongsToAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BelongsTo__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BelongsTo__Group__3__Impl
	rule__BelongsTo__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getSpaceKeyword_3()); }
(
	' ' 
)*
{ after(grammarAccess.getBelongsToAccess().getSpaceKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BelongsTo__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BelongsTo__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getOptionsAssignment_4()); }
(rule__BelongsTo__OptionsAssignment_4)*
{ after(grammarAccess.getBelongsToAccess().getOptionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Method__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getDEF_WORDTerminalRuleCall_0()); }
	RULE_DEF_WORD
{ after(grammarAccess.getMethodAccess().getDEF_WORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getNameAssignment_1()); }
(rule__Method__NameAssignment_1)
{ after(grammarAccess.getMethodAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodName__Group__0__Impl
	rule__MethodName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getMethodNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getAlternatives_1()); }
(rule__MethodName__Alternatives_1)?
{ after(grammarAccess.getMethodNameAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Class__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameNamespacedModuleNameParserRuleCall_2_0()); }
	ruleNamespacedModuleName{ after(grammarAccess.getClassAccess().getNameNamespacedModuleNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__SuperTypeAssignment_3_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSuperTypeNamespacedModuleNameParserRuleCall_3_3_0()); }
	ruleNamespacedModuleName{ after(grammarAccess.getClassAccess().getSuperTypeNamespacedModuleNameParserRuleCall_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__ClassElementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getClassElementsClassElementParserRuleCall_5_0()); }
	ruleClassElement{ after(grammarAccess.getClassAccess().getClassElementsClassElementParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HasMany__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasManyAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getHasManyAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HasAndBelongsToMany__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasAndBelongsToManyAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getHasAndBelongsToManyAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__HashKeyValue__KeyAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getKeyIDTerminalRuleCall_2_0_0_0()); }
	RULE_ID{ after(grammarAccess.getHashKeyValueAccess().getKeyIDTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__KeyAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getKeyAlternatives_2_1_0_0()); }
(rule__HashKeyValue__KeyAlternatives_2_1_0_0)
{ after(grammarAccess.getHashKeyValueAccess().getKeyAlternatives_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashKeyValue__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashKeyValueAccess().getValueAlternatives_4_0()); }
(rule__HashKeyValue__ValueAlternatives_4_0)
{ after(grammarAccess.getHashKeyValueAccess().getValueAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getNameAlternatives_2_0()); }
(rule__BelongsTo__NameAlternatives_2_0)
{ after(grammarAccess.getBelongsToAccess().getNameAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__OptionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBelongsToAccess().getOptionsHashKeyValueParserRuleCall_4_0()); }
	ruleHashKeyValue{ after(grammarAccess.getBelongsToAccess().getOptionsHashKeyValueParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getNameMethodNameParserRuleCall_1_0()); }
	ruleMethodName{ after(grammarAccess.getMethodAccess().getNameMethodNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BELONGS_TO_WORD : 'belongs_to';

RULE_HAS_MANY_WORD : 'has_many';

RULE_HAS_AND_BELONGS_TO_MANY_WORD : 'has_and_belongs_to_many';

RULE_CLASS_WORD : 'class';

RULE_MODULE_WORD : 'module';

RULE_DEF_WORD : 'def';

RULE_END_WORD : 'end';

RULE_SYMBOL : ':' RULE_ID;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ( options {greedy=false;} : . )*'"'|'\'' ( options {greedy=false;} : . )*'\'');

RULE_ML_COMMENT : '=begin' ( options {greedy=false;} : . )*'=end';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_INT : ('0'..'9')+;

RULE_ANY_OTHER : .;


