/*
 * generated by Xtext 2.10.0
 */
package co.gruposaberes.rails.parser.serializer;

import co.gruposaberes.rails.parser.schema.Schema;
import co.gruposaberes.rails.parser.schema.SchemaPackage;
import co.gruposaberes.rails.parser.schema.Table;
import co.gruposaberes.rails.parser.schema.TableAttributes;
import co.gruposaberes.rails.parser.services.SchemaGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SchemaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SchemaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SchemaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SchemaPackage.SCHEMA:
				sequence_Schema(context, (Schema) semanticObject); 
				return; 
			case SchemaPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case SchemaPackage.TABLE_ATTRIBUTES:
				sequence_TableAttributes(context, (TableAttributes) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Schema returns Schema
	 *
	 * Constraint:
	 *     schema_members+=SchemaMember+
	 */
	protected void sequence_Schema(ISerializationContext context, Schema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableAttributes returns TableAttributes
	 *
	 * Constraint:
	 *     (datatype=ID name=STRING)
	 */
	protected void sequence_TableAttributes(ISerializationContext context, TableAttributes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchemaPackage.Literals.TABLE_ATTRIBUTES__DATATYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaPackage.Literals.TABLE_ATTRIBUTES__DATATYPE));
			if (transientValues.isValueTransient(semanticObject, SchemaPackage.Literals.TABLE_ATTRIBUTES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaPackage.Literals.TABLE_ATTRIBUTES__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableAttributesAccess().getDatatypeIDTerminalRuleCall_1_0(), semanticObject.getDatatype());
		feeder.accept(grammarAccess.getTableAttributesAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SchemaMember returns Table
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=STRING attributes+=TableAttributes*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
