/*
 * generated by Xtext 2.10.0
 */
package co.gruposaberes.rails.parser.serializer;

import co.gruposaberes.rails.parser.services.SchemaGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SchemaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SchemaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_TableAttributes___COMMATerminalRuleCall_3_0_SPACETerminalRuleCall_3_1_a_IgnoredHashKeyValueParserRuleCall_3_2__a;
	protected AbstractElementAlias match_Table___COMMATerminalRuleCall_2_0_IgnoredHashKeyValueParserRuleCall_2_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SchemaGrammarAccess) access;
		match_TableAttributes___COMMATerminalRuleCall_3_0_SPACETerminalRuleCall_3_1_a_IgnoredHashKeyValueParserRuleCall_3_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTableAttributesAccess().getCOMMATerminalRuleCall_3_0()), new TokenAlias(true, true, grammarAccess.getTableAttributesAccess().getSPACETerminalRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getTableAttributesAccess().getIgnoredHashKeyValueParserRuleCall_3_2()));
		match_Table___COMMATerminalRuleCall_2_0_IgnoredHashKeyValueParserRuleCall_2_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTableAccess().getCOMMATerminalRuleCall_2_0()), new TokenAlias(false, false, grammarAccess.getTableAccess().getIgnoredHashKeyValueParserRuleCall_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBLOCK_PARAMSRule())
			return getBLOCK_PARAMSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDO_WORDRule())
			return getDO_WORDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEND_WORDRule())
			return getEND_WORDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIgnoredHashKeyValueRule())
			return getIgnoredHashKeyValueToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIndexRule())
			return getIndexToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPARENTHESIS_BLOCKRule())
			return getPARENTHESIS_BLOCKToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSPACERule())
			return getSPACEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal BLOCK_PARAMS: '|'ID'|';
	 */
	protected String getBLOCK_PARAMSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "||";
	}
	
	/**
	 * terminal COMMA: ',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal DO_WORD: 'do';
	 */
	protected String getDO_WORDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "do";
	}
	
	/**
	 * terminal END_WORD: 'end';
	 */
	protected String getEND_WORDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "end";
	}
	
	/**
	 * IgnoredHashKeyValue:
	 * 	SPACE* (ID':'|(SYMBOL|STRING) SPACE*'=>') SPACE* (SYMBOL|STRING|ARRAY_BLOCK|INT|ID|DECIMAL) SPACE*
	 * ;
	 */
	protected String getIgnoredHashKeyValueToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "::";
	}
	
	/**
	 * Index:
	 * 	ID STRING (COMMA (IgnoredHashKeyValue|ARRAY_BLOCK))*
	 * ;
	 */
	protected String getIndexToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal PARENTHESIS_BLOCK: '('!(')')*')';
	 */
	protected String getPARENTHESIS_BLOCKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "()";
	}
	
	/**
	 * terminal SPACE: ' '|'\f';
	 */
	protected String getSPACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_TableAttributes___COMMATerminalRuleCall_3_0_SPACETerminalRuleCall_3_1_a_IgnoredHashKeyValueParserRuleCall_3_2__a.equals(syntax))
				emit_TableAttributes___COMMATerminalRuleCall_3_0_SPACETerminalRuleCall_3_1_a_IgnoredHashKeyValueParserRuleCall_3_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table___COMMATerminalRuleCall_2_0_IgnoredHashKeyValueParserRuleCall_2_1__a.equals(syntax))
				emit_Table___COMMATerminalRuleCall_2_0_IgnoredHashKeyValueParserRuleCall_2_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (COMMA SPACE* IgnoredHashKeyValue)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) (rule end)
	 */
	protected void emit_TableAttributes___COMMATerminalRuleCall_3_0_SPACETerminalRuleCall_3_1_a_IgnoredHashKeyValueParserRuleCall_3_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (COMMA IgnoredHashKeyValue)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) DO_WORD BLOCK_PARAMS END_WORD (rule end)
	 *     name=STRING (ambiguity) DO_WORD BLOCK_PARAMS attributes+=TableAttributes
	 */
	protected void emit_Table___COMMATerminalRuleCall_2_0_IgnoredHashKeyValueParserRuleCall_2_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
