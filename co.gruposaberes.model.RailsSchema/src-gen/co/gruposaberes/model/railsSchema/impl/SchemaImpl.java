/**
 * generated by Xtext 2.10.0
 */
package co.gruposaberes.model.railsSchema.impl;

import co.gruposaberes.model.railsSchema.RailsSchemaPackage;
import co.gruposaberes.model.railsSchema.Schema;
import co.gruposaberes.model.railsSchema.SchemaMember;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Schema</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.gruposaberes.model.railsSchema.impl.SchemaImpl#getSchema_members <em>Schema members</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SchemaImpl extends MinimalEObjectImpl.Container implements Schema
{
  /**
   * The cached value of the '{@link #getSchema_members() <em>Schema members</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchema_members()
   * @generated
   * @ordered
   */
  protected EList<SchemaMember> schema_members;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchemaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RailsSchemaPackage.Literals.SCHEMA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SchemaMember> getSchema_members()
  {
    if (schema_members == null)
    {
      schema_members = new EObjectContainmentEList<SchemaMember>(SchemaMember.class, this, RailsSchemaPackage.SCHEMA__SCHEMA_MEMBERS);
    }
    return schema_members;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RailsSchemaPackage.SCHEMA__SCHEMA_MEMBERS:
        return ((InternalEList<?>)getSchema_members()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RailsSchemaPackage.SCHEMA__SCHEMA_MEMBERS:
        return getSchema_members();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RailsSchemaPackage.SCHEMA__SCHEMA_MEMBERS:
        getSchema_members().clear();
        getSchema_members().addAll((Collection<? extends SchemaMember>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RailsSchemaPackage.SCHEMA__SCHEMA_MEMBERS:
        getSchema_members().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RailsSchemaPackage.SCHEMA__SCHEMA_MEMBERS:
        return schema_members != null && !schema_members.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SchemaImpl
