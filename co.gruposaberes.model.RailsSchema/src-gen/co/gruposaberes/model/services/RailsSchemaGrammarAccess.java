/*
 * generated by Xtext 2.10.0
 */
package co.gruposaberes.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RailsSchemaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActiveRecordSchemaDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPARENTHESIS_BLOCKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDO_WORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSchema_membersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSchema_membersSchemaMemberParserRuleCall_3_0 = (RuleCall)cSchema_membersAssignment_3.eContents().get(0);
		private final RuleCall cEND_WORDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Schema:
		//	"ActiveRecord::Schema.define" PARENTHESIS_BLOCK DO_WORD
		//	schema_members+=SchemaMember*
		//	END_WORD;
		@Override public ParserRule getRule() { return rule; }
		
		//"ActiveRecord::Schema.define" PARENTHESIS_BLOCK DO_WORD schema_members+=SchemaMember* END_WORD
		public Group getGroup() { return cGroup; }
		
		//"ActiveRecord::Schema.define"
		public Keyword getActiveRecordSchemaDefineKeyword_0() { return cActiveRecordSchemaDefineKeyword_0; }
		
		//PARENTHESIS_BLOCK
		public RuleCall getPARENTHESIS_BLOCKTerminalRuleCall_1() { return cPARENTHESIS_BLOCKTerminalRuleCall_1; }
		
		//DO_WORD
		public RuleCall getDO_WORDTerminalRuleCall_2() { return cDO_WORDTerminalRuleCall_2; }
		
		//schema_members+=SchemaMember*
		public Assignment getSchema_membersAssignment_3() { return cSchema_membersAssignment_3; }
		
		//SchemaMember
		public RuleCall getSchema_membersSchemaMemberParserRuleCall_3_0() { return cSchema_membersSchemaMemberParserRuleCall_3_0; }
		
		//END_WORD
		public RuleCall getEND_WORDTerminalRuleCall_4() { return cEND_WORDTerminalRuleCall_4; }
	}
	public class SchemaMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.SchemaMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SchemaMember:
		//	Table | Index;
		@Override public ParserRule getRule() { return rule; }
		
		//Table | Index
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Table
		public RuleCall getTableParserRuleCall_0() { return cTableParserRuleCall_0; }
		
		//Index
		public RuleCall getIndexParserRuleCall_1() { return cIndexParserRuleCall_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreate_tableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIgnoredHashKeyValueParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cDO_WORDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cBLOCK_PARAMSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesTableAttributesParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final RuleCall cEND_WORDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Table:
		//	'create_table' name=STRING (COMMA IgnoredHashKeyValue)* DO_WORD BLOCK_PARAMS
		//	attributes+=TableAttributes*
		//	=> END_WORD;
		@Override public ParserRule getRule() { return rule; }
		
		//'create_table' name=STRING (COMMA IgnoredHashKeyValue)* DO_WORD BLOCK_PARAMS attributes+=TableAttributes* => END_WORD
		public Group getGroup() { return cGroup; }
		
		//'create_table'
		public Keyword getCreate_tableKeyword_0() { return cCreate_tableKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//(COMMA IgnoredHashKeyValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//IgnoredHashKeyValue
		public RuleCall getIgnoredHashKeyValueParserRuleCall_2_1() { return cIgnoredHashKeyValueParserRuleCall_2_1; }
		
		//DO_WORD
		public RuleCall getDO_WORDTerminalRuleCall_3() { return cDO_WORDTerminalRuleCall_3; }
		
		//BLOCK_PARAMS
		public RuleCall getBLOCK_PARAMSTerminalRuleCall_4() { return cBLOCK_PARAMSTerminalRuleCall_4; }
		
		//attributes+=TableAttributes*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//TableAttributes
		public RuleCall getAttributesTableAttributesParserRuleCall_5_0() { return cAttributesTableAttributesParserRuleCall_5_0; }
		
		//=> END_WORD
		public RuleCall getEND_WORDTerminalRuleCall_6() { return cEND_WORDTerminalRuleCall_6; }
	}
	public class TableAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.TableAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDatatypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDatatypeIDTerminalRuleCall_1_0 = (RuleCall)cDatatypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cIgnoredHashKeyValueParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//TableAttributes:
		//	't.' datatype=ID name=STRING (COMMA SPACE* IgnoredHashKeyValue)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'t.' datatype=ID name=STRING (COMMA SPACE* IgnoredHashKeyValue)*
		public Group getGroup() { return cGroup; }
		
		//'t.'
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//datatype=ID
		public Assignment getDatatypeAssignment_1() { return cDatatypeAssignment_1; }
		
		//ID
		public RuleCall getDatatypeIDTerminalRuleCall_1_0() { return cDatatypeIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//(COMMA SPACE* IgnoredHashKeyValue)*
		public Group getGroup_3() { return cGroup_3; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_3_1() { return cSPACETerminalRuleCall_3_1; }
		
		//IgnoredHashKeyValue
		public RuleCall getIgnoredHashKeyValueParserRuleCall_3_2() { return cIgnoredHashKeyValueParserRuleCall_3_2; }
	}
	public class IgnoredHashKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.IgnoredHashKeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSYMBOLTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cARRAY_BLOCKTerminalRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3_3 = (RuleCall)cAlternatives_3.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_3_4 = (RuleCall)cAlternatives_3.eContents().get(4);
		private final RuleCall cDECIMALTerminalRuleCall_3_5 = (RuleCall)cAlternatives_3.eContents().get(5);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//IgnoredHashKeyValue:
		//	SPACE* (ID ':' | (SYMBOL | STRING) SPACE* '=>') SPACE* (SYMBOL | STRING | ARRAY_BLOCK | INT | ID | DECIMAL) SPACE*;
		@Override public ParserRule getRule() { return rule; }
		
		//SPACE* (ID ':' | (SYMBOL | STRING) SPACE* '=>') SPACE* (SYMBOL | STRING | ARRAY_BLOCK | INT | ID | DECIMAL) SPACE*
		public Group getGroup() { return cGroup; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_0() { return cSPACETerminalRuleCall_0; }
		
		//(ID ':' | (SYMBOL | STRING) SPACE* '=>')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_0() { return cIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//(SYMBOL | STRING) SPACE* '=>'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(SYMBOL | STRING)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_1_1_0_0() { return cSYMBOLTerminalRuleCall_1_1_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_0_1() { return cSTRINGTerminalRuleCall_1_1_0_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1_1_1() { return cSPACETerminalRuleCall_1_1_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1_2() { return cEqualsSignGreaterThanSignKeyword_1_1_2; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
		
		//(SYMBOL | STRING | ARRAY_BLOCK | INT | ID | DECIMAL)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_3_0() { return cSYMBOLTerminalRuleCall_3_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_1() { return cSTRINGTerminalRuleCall_3_1; }
		
		//ARRAY_BLOCK
		public RuleCall getARRAY_BLOCKTerminalRuleCall_3_2() { return cARRAY_BLOCKTerminalRuleCall_3_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_3() { return cINTTerminalRuleCall_3_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_4() { return cIDTerminalRuleCall_3_4; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_3_5() { return cDECIMALTerminalRuleCall_3_5; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cIgnoredHashKeyValueParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cARRAY_BLOCKTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		
		//Index:
		//	ID STRING (COMMA (IgnoredHashKeyValue | ARRAY_BLOCK))*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID STRING (COMMA (IgnoredHashKeyValue | ARRAY_BLOCK))*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//(COMMA (IgnoredHashKeyValue | ARRAY_BLOCK))*
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//(IgnoredHashKeyValue | ARRAY_BLOCK)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//IgnoredHashKeyValue
		public RuleCall getIgnoredHashKeyValueParserRuleCall_2_1_0() { return cIgnoredHashKeyValueParserRuleCall_2_1_0; }
		
		//ARRAY_BLOCK
		public RuleCall getARRAY_BLOCKTerminalRuleCall_2_1_1() { return cARRAY_BLOCKTerminalRuleCall_2_1_1; }
	}
	
	
	private final SchemaElements pSchema;
	private final SchemaMemberElements pSchemaMember;
	private final TableElements pTable;
	private final TableAttributesElements pTableAttributes;
	private final IgnoredHashKeyValueElements pIgnoredHashKeyValue;
	private final IndexElements pIndex;
	private final TerminalRule tCOMMA;
	private final TerminalRule tSPACE;
	private final TerminalRule tBRACKET_BLOCK_ALONE;
	private final TerminalRule tARRAY_BLOCK;
	private final TerminalRule tPARENTHESIS_BLOCK;
	private final TerminalRule tDO_WORD;
	private final TerminalRule tEND_WORD;
	private final TerminalRule tBLOCK_PARAMS;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tINT;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tBS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public RailsSchemaGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pSchema = new SchemaElements();
		this.pSchemaMember = new SchemaMemberElements();
		this.pTable = new TableElements();
		this.pTableAttributes = new TableAttributesElements();
		this.pIgnoredHashKeyValue = new IgnoredHashKeyValueElements();
		this.pIndex = new IndexElements();
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.COMMA");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.SPACE");
		this.tBRACKET_BLOCK_ALONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.BRACKET_BLOCK_ALONE");
		this.tARRAY_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.ARRAY_BLOCK");
		this.tPARENTHESIS_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.PARENTHESIS_BLOCK");
		this.tDO_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.DO_WORD");
		this.tEND_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.END_WORD");
		this.tBLOCK_PARAMS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.BLOCK_PARAMS");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.SYMBOL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.SL_COMMENT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.INT");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.DECIMAL");
		this.tBS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.BS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.gruposaberes.model.RailsSchema.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.gruposaberes.model.RailsSchema".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Schema:
	//	"ActiveRecord::Schema.define" PARENTHESIS_BLOCK DO_WORD
	//	schema_members+=SchemaMember*
	//	END_WORD;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}
	
	//SchemaMember:
	//	Table | Index;
	public SchemaMemberElements getSchemaMemberAccess() {
		return pSchemaMember;
	}
	
	public ParserRule getSchemaMemberRule() {
		return getSchemaMemberAccess().getRule();
	}
	
	//Table:
	//	'create_table' name=STRING (COMMA IgnoredHashKeyValue)* DO_WORD BLOCK_PARAMS
	//	attributes+=TableAttributes*
	//	=> END_WORD;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//TableAttributes:
	//	't.' datatype=ID name=STRING (COMMA SPACE* IgnoredHashKeyValue)*;
	public TableAttributesElements getTableAttributesAccess() {
		return pTableAttributes;
	}
	
	public ParserRule getTableAttributesRule() {
		return getTableAttributesAccess().getRule();
	}
	
	//IgnoredHashKeyValue:
	//	SPACE* (ID ':' | (SYMBOL | STRING) SPACE* '=>') SPACE* (SYMBOL | STRING | ARRAY_BLOCK | INT | ID | DECIMAL) SPACE*;
	public IgnoredHashKeyValueElements getIgnoredHashKeyValueAccess() {
		return pIgnoredHashKeyValue;
	}
	
	public ParserRule getIgnoredHashKeyValueRule() {
		return getIgnoredHashKeyValueAccess().getRule();
	}
	
	//Index:
	//	ID STRING (COMMA (IgnoredHashKeyValue | ARRAY_BLOCK))*;
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal SPACE:
	//	' ' | '\f';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal BRACKET_BLOCK_ALONE:
	//	'{' !('{' | '}')* '}';
	public TerminalRule getBRACKET_BLOCK_ALONERule() {
		return tBRACKET_BLOCK_ALONE;
	}
	
	//terminal ARRAY_BLOCK:
	//	'[' !']'* ']';
	public TerminalRule getARRAY_BLOCKRule() {
		return tARRAY_BLOCK;
	}
	
	//terminal PARENTHESIS_BLOCK:
	//	'(' !')'* ')';
	public TerminalRule getPARENTHESIS_BLOCKRule() {
		return tPARENTHESIS_BLOCK;
	}
	
	//terminal DO_WORD:
	//	'do';
	public TerminalRule getDO_WORDRule() {
		return tDO_WORD;
	}
	
	//terminal END_WORD:
	//	'end';
	public TerminalRule getEND_WORDRule() {
		return tEND_WORD;
	}
	
	//terminal BLOCK_PARAMS:
	//	'|' ID '|';
	public TerminalRule getBLOCK_PARAMSRule() {
		return tBLOCK_PARAMS;
	}
	
	//terminal SYMBOL:
	//	':' ID;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'=begin'->'=end';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'#'->'\n';
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DECIMAL:
	//	INT '.' INT;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal BS:
	//	'\t' | '\n';
	public TerminalRule getBSRule() {
		return tBS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
