/*
 * generated by Xtext 2.10.0
 */
grammar InternalRailsSchema;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package co.gruposaberes.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package co.gruposaberes.model.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import co.gruposaberes.model.services.RailsSchemaGrammarAccess;

}

@parser::members {

 	private RailsSchemaGrammarAccess grammarAccess;

    public InternalRailsSchemaParser(TokenStream input, RailsSchemaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Schema";
   	}

   	@Override
   	protected RailsSchemaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSchema
entryRuleSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaRule()); }
	iv_ruleSchema=ruleSchema
	{ $current=$iv_ruleSchema.current; }
	EOF;

// Rule Schema
ruleSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ActiveRecord::Schema.define'
		{
			newLeafNode(otherlv_0, grammarAccess.getSchemaAccess().getActiveRecordSchemaDefineKeyword_0());
		}
		this_PARENTHESIS_BLOCK_1=RULE_PARENTHESIS_BLOCK
		{
			newLeafNode(this_PARENTHESIS_BLOCK_1, grammarAccess.getSchemaAccess().getPARENTHESIS_BLOCKTerminalRuleCall_1());
		}
		this_DO_WORD_2=RULE_DO_WORD
		{
			newLeafNode(this_DO_WORD_2, grammarAccess.getSchemaAccess().getDO_WORDTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSchemaAccess().getSchema_membersSchemaMemberParserRuleCall_3_0());
				}
				lv_schema_members_3_0=ruleSchemaMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSchemaRule());
					}
					add(
						$current,
						"schema_members",
						lv_schema_members_3_0,
						"co.gruposaberes.model.RailsSchema.SchemaMember");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_WORD_4=RULE_END_WORD
		{
			newLeafNode(this_END_WORD_4, grammarAccess.getSchemaAccess().getEND_WORDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleSchemaMember
entryRuleSchemaMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaMemberRule()); }
	iv_ruleSchemaMember=ruleSchemaMember
	{ $current=$iv_ruleSchemaMember.current; }
	EOF;

// Rule SchemaMember
ruleSchemaMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSchemaMemberAccess().getTableParserRuleCall_0());
		}
		this_Table_0=ruleTable
		{
			$current = $this_Table_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaMemberAccess().getIndexParserRuleCall_1());
		}
		ruleIndex
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='create_table'
		{
			newLeafNode(otherlv_0, grammarAccess.getTableAccess().getCreate_tableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTableAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"co.gruposaberes.model.RailsSchema.STRING");
				}
			)
		)
		(
			this_COMMA_2=RULE_COMMA
			{
				newLeafNode(this_COMMA_2, grammarAccess.getTableAccess().getCOMMATerminalRuleCall_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTableAccess().getIgnoredHashKeyValueParserRuleCall_2_1());
			}
			ruleIgnoredHashKeyValue
			{
				afterParserOrEnumRuleCall();
			}
		)*
		this_DO_WORD_4=RULE_DO_WORD
		{
			newLeafNode(this_DO_WORD_4, grammarAccess.getTableAccess().getDO_WORDTerminalRuleCall_3());
		}
		this_BLOCK_PARAMS_5=RULE_BLOCK_PARAMS
		{
			newLeafNode(this_BLOCK_PARAMS_5, grammarAccess.getTableAccess().getBLOCK_PARAMSTerminalRuleCall_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getAttributesTableAttributesParserRuleCall_5_0());
				}
				lv_attributes_6_0=ruleTableAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_6_0,
						"co.gruposaberes.model.RailsSchema.TableAttributes");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(RULE_END_WORD)=>
			this_END_WORD_7=RULE_END_WORD
			{
				newLeafNode(this_END_WORD_7, grammarAccess.getTableAccess().getEND_WORDTerminalRuleCall_6());
			}
		)
	)
;

// Entry rule entryRuleTableAttributes
entryRuleTableAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableAttributesRule()); }
	iv_ruleTableAttributes=ruleTableAttributes
	{ $current=$iv_ruleTableAttributes.current; }
	EOF;

// Rule TableAttributes
ruleTableAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='t.'
		{
			newLeafNode(otherlv_0, grammarAccess.getTableAttributesAccess().getTKeyword_0());
		}
		(
			(
				lv_datatype_1_0=RULE_ID
				{
					newLeafNode(lv_datatype_1_0, grammarAccess.getTableAttributesAccess().getDatatypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableAttributesRule());
					}
					setWithLastConsumed(
						$current,
						"datatype",
						lv_datatype_1_0,
						"co.gruposaberes.model.RailsSchema.ID");
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTableAttributesAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableAttributesRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"co.gruposaberes.model.RailsSchema.STRING");
				}
			)
		)
		(
			this_COMMA_3=RULE_COMMA
			{
				newLeafNode(this_COMMA_3, grammarAccess.getTableAttributesAccess().getCOMMATerminalRuleCall_3_0());
			}
			(
				this_SPACE_4=RULE_SPACE
				{
					newLeafNode(this_SPACE_4, grammarAccess.getTableAttributesAccess().getSPACETerminalRuleCall_3_1());
				}
			)*
			{
				newCompositeNode(grammarAccess.getTableAttributesAccess().getIgnoredHashKeyValueParserRuleCall_3_2());
			}
			ruleIgnoredHashKeyValue
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleIgnoredHashKeyValue
entryRuleIgnoredHashKeyValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIgnoredHashKeyValueRule()); }
	iv_ruleIgnoredHashKeyValue=ruleIgnoredHashKeyValue
	{ $current=$iv_ruleIgnoredHashKeyValue.current.getText(); }
	EOF;

// Rule IgnoredHashKeyValue
ruleIgnoredHashKeyValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_SPACE_0=RULE_SPACE
			{
				$current.merge(this_SPACE_0);
			}
			{
				newLeafNode(this_SPACE_0, grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_0());
			}
		)*
		(
			(
				this_ID_1=RULE_ID
				{
					$current.merge(this_ID_1);
				}
				{
					newLeafNode(this_ID_1, grammarAccess.getIgnoredHashKeyValueAccess().getIDTerminalRuleCall_1_0_0());
				}
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIgnoredHashKeyValueAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			(
				(
					this_SYMBOL_3=RULE_SYMBOL
					{
						$current.merge(this_SYMBOL_3);
					}
					{
						newLeafNode(this_SYMBOL_3, grammarAccess.getIgnoredHashKeyValueAccess().getSYMBOLTerminalRuleCall_1_1_0_0());
					}
					    |
					this_STRING_4=RULE_STRING
					{
						$current.merge(this_STRING_4);
					}
					{
						newLeafNode(this_STRING_4, grammarAccess.getIgnoredHashKeyValueAccess().getSTRINGTerminalRuleCall_1_1_0_1());
					}
				)
				(
					this_SPACE_5=RULE_SPACE
					{
						$current.merge(this_SPACE_5);
					}
					{
						newLeafNode(this_SPACE_5, grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_1_1_1());
					}
				)*
				kw='=>'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIgnoredHashKeyValueAccess().getEqualsSignGreaterThanSignKeyword_1_1_2());
				}
			)
		)
		(
			this_SPACE_7=RULE_SPACE
			{
				$current.merge(this_SPACE_7);
			}
			{
				newLeafNode(this_SPACE_7, grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_2());
			}
		)*
		(
			this_SYMBOL_8=RULE_SYMBOL
			{
				$current.merge(this_SYMBOL_8);
			}
			{
				newLeafNode(this_SYMBOL_8, grammarAccess.getIgnoredHashKeyValueAccess().getSYMBOLTerminalRuleCall_3_0());
			}
			    |
			this_STRING_9=RULE_STRING
			{
				$current.merge(this_STRING_9);
			}
			{
				newLeafNode(this_STRING_9, grammarAccess.getIgnoredHashKeyValueAccess().getSTRINGTerminalRuleCall_3_1());
			}
			    |
			this_ARRAY_BLOCK_10=RULE_ARRAY_BLOCK
			{
				$current.merge(this_ARRAY_BLOCK_10);
			}
			{
				newLeafNode(this_ARRAY_BLOCK_10, grammarAccess.getIgnoredHashKeyValueAccess().getARRAY_BLOCKTerminalRuleCall_3_2());
			}
			    |
			this_INT_11=RULE_INT
			{
				$current.merge(this_INT_11);
			}
			{
				newLeafNode(this_INT_11, grammarAccess.getIgnoredHashKeyValueAccess().getINTTerminalRuleCall_3_3());
			}
			    |
			this_ID_12=RULE_ID
			{
				$current.merge(this_ID_12);
			}
			{
				newLeafNode(this_ID_12, grammarAccess.getIgnoredHashKeyValueAccess().getIDTerminalRuleCall_3_4());
			}
			    |
			this_DECIMAL_13=RULE_DECIMAL
			{
				$current.merge(this_DECIMAL_13);
			}
			{
				newLeafNode(this_DECIMAL_13, grammarAccess.getIgnoredHashKeyValueAccess().getDECIMALTerminalRuleCall_3_5());
			}
		)
		(
			this_SPACE_14=RULE_SPACE
			{
				$current.merge(this_SPACE_14);
			}
			{
				newLeafNode(this_SPACE_14, grammarAccess.getIgnoredHashKeyValueAccess().getSPACETerminalRuleCall_4());
			}
		)*
	)
;

// Entry rule entryRuleIndex
entryRuleIndex returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	iv_ruleIndex=ruleIndex
	{ $current=$iv_ruleIndex.current.getText(); }
	EOF;

// Rule Index
ruleIndex returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getIndexAccess().getIDTerminalRuleCall_0());
		}
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getIndexAccess().getSTRINGTerminalRuleCall_1());
		}
		(
			this_COMMA_2=RULE_COMMA
			{
				$current.merge(this_COMMA_2);
			}
			{
				newLeafNode(this_COMMA_2, grammarAccess.getIndexAccess().getCOMMATerminalRuleCall_2_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getIndexAccess().getIgnoredHashKeyValueParserRuleCall_2_1_0());
				}
				this_IgnoredHashKeyValue_3=ruleIgnoredHashKeyValue
				{
					$current.merge(this_IgnoredHashKeyValue_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				this_ARRAY_BLOCK_4=RULE_ARRAY_BLOCK
				{
					$current.merge(this_ARRAY_BLOCK_4);
				}
				{
					newLeafNode(this_ARRAY_BLOCK_4, grammarAccess.getIndexAccess().getARRAY_BLOCKTerminalRuleCall_2_1_1());
				}
			)
		)*
	)
;

RULE_COMMA : ',';

RULE_SPACE : (' '|'\f');

RULE_BRACKET_BLOCK_ALONE : '{' ~(('{'|'}'))* '}';

RULE_ARRAY_BLOCK : '[' ~(']')* ']';

RULE_PARENTHESIS_BLOCK : '(' ~(')')* ')';

RULE_DO_WORD : 'do';

RULE_END_WORD : 'end';

RULE_BLOCK_PARAMS : '|' RULE_ID '|';

RULE_SYMBOL : ':' RULE_ID;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '=begin' ( options {greedy=false;} : . )*'=end';

RULE_SL_COMMENT : '#' ( options {greedy=false;} : . )*'\n';

RULE_INT : ('0'..'9')+;

RULE_DECIMAL : RULE_INT '.' RULE_INT;

RULE_BS : ('\t'|'\n');

RULE_ANY_OTHER : .;
